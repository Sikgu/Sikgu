{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Plant Subscription Service (식구)\n\n## Overview\n\nThis is a Korean plant subscription service called \"식구\" (Plant Family) that allows users to discover and subscribe to premium plants for their spaces. The application features a modern, responsive web interface built with React and a Node.js/Express backend. The service offers different subscription tiers with a coin-based system, plant care guides, expert consultation, and user reviews.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React with TypeScript using Vite as the build tool\n- **Styling**: Tailwind CSS with shadcn/ui component library for consistent design\n- **UI Components**: Comprehensive set of Radix UI primitives wrapped in custom components\n- **Routing**: Wouter for lightweight client-side routing\n- **State Management**: TanStack React Query for server state management\n- **Forms**: React Hook Form with Zod validation\n- **Internationalization**: Korean language support with Noto Sans KR font\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Language**: TypeScript with ES modules\n- **Development**: Hot reload with Vite integration for development\n- **Storage**: In-memory storage implementation with interface for future database integration\n- **Session Management**: express-session with connect-pg-simple for PostgreSQL session store\n\n### Database Architecture\n- **ORM**: Drizzle ORM with PostgreSQL dialect\n- **Database**: Configured for PostgreSQL with Neon Database serverless connection\n- **Schema**: User management with username/password authentication\n- **Migrations**: Drizzle Kit for database schema management\n\n### Design System\n- **Theme**: Custom color palette with forest green primary colors\n- **Components**: shadcn/ui \"new-york\" style variant\n- **Typography**: Korean-optimized font stack with Noto Sans KR\n- **Responsive Design**: Mobile-first approach with Tailwind breakpoints\n\n### Development Workflow\n- **Build Process**: Separate client and server builds with esbuild for server bundling\n- **Development Server**: Integrated Vite dev server with Express API routes\n- **Type Safety**: Strict TypeScript configuration with shared types\n- **Code Quality**: Path mapping for clean imports and consistent file organization\n\n## External Dependencies\n\n### Core Framework Dependencies\n- **React Ecosystem**: React 18 with React DOM, React Hook Form, and TanStack React Query\n- **Backend**: Express.js with TypeScript support via tsx\n- **Build Tools**: Vite for frontend bundling, esbuild for server bundling\n\n### UI and Styling\n- **Component Library**: Radix UI primitives for accessible components\n- **Styling**: Tailwind CSS with PostCSS and Autoprefixer\n- **Icons**: Lucide React icon library\n- **Utilities**: clsx and tailwind-merge for conditional styling\n\n### Database and Validation\n- **Database**: Drizzle ORM with PostgreSQL support via @neondatabase/serverless\n- **Validation**: Zod for schema validation and type safety\n- **Sessions**: connect-pg-simple for PostgreSQL session storage\n\n### Development Tools\n- **Development**: Replit-specific plugins for error overlay and debugging\n- **Date Handling**: date-fns for date manipulation\n- **Carousel**: Embla Carousel for image galleries\n- **Command Interface**: cmdk for command palette functionality\n\n### External Services\n- **Database Hosting**: Neon Database for serverless PostgreSQL\n- **Image Assets**: Unsplash for plant photography\n- **Fonts**: Google Fonts for Noto Sans KR typography","size_bytes":3582},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n        forest: \"var(--forest)\",\n        olive: \"var(--olive)\",\n        \"light-green\": \"var(--light-green)\",\n        \"bg-soft\": \"var(--bg-soft)\",\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n        korean: [\"Noto Sans KR\", \"sans-serif\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2960},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  const host = process.env.NODE_ENV === 'production' ? \"0.0.0.0\" : \"127.0.0.1\";\n  \n  server.listen(port, host, () => {\n    log(`serving on ${host}:${port}`);\n  });\n})();\n","size_bytes":2105},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertUserSchema } from \"@shared/schema\";\nimport session from \"express-session\";\nimport MemoryStore from \"memorystore\";\n\n// Configure session middleware\nconst MemoryStoreConstructor = MemoryStore(session);\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Session middleware\n  app.use(session({\n    secret: process.env.SESSION_SECRET || 'your-secret-key-here',\n    resave: false,\n    saveUninitialized: false,\n    store: new MemoryStoreConstructor({\n      checkPeriod: 86400000 // prune expired entries every 24h\n    }),\n    cookie: {\n      secure: false, // set to true in production with HTTPS\n      httpOnly: true,\n      maxAge: 24 * 60 * 60 * 1000, // 24 hours\n      sameSite: 'lax'\n    },\n    name: 'sessionId'\n  }));\n\n  // Auth routes\n  app.post(\"/api/auth/signup\", async (req, res) => {\n    try {\n      const validatedData = insertUserSchema.parse(req.body);\n      \n      // Check if user already exists\n      const existingUser = await storage.getUserByUsername(validatedData.username);\n      if (existingUser) {\n        return res.status(400).send(\"이미 사용 중인 아이디입니다.\");\n      }\n\n      // Create new user\n      const newUser = await storage.createUser(validatedData);\n      res.status(201).json({ id: newUser.id, username: newUser.username });\n    } catch (error) {\n      console.error(\"Signup error:\", error);\n      res.status(400).send(\"회원가입 중 오류가 발생했습니다.\");\n    }\n  });\n\n  app.post(\"/api/auth/login\", async (req, res) => {\n    try {\n      const { username, password } = req.body;\n      \n      if (!username || !password) {\n        return res.status(400).send(\"아이디와 비밀번호를 입력해주세요.\");\n      }\n\n      // Find user\n      const user = await storage.getUserByUsername(username);\n      if (!user || user.password !== password) {\n        return res.status(401).send(\"아이디 또는 비밀번호가 올바르지 않습니다.\");\n      }\n\n      // Set session\n      (req.session as any).userId = user.id;\n      console.log(\"Setting session for user:\", user.id);\n      console.log(\"Session ID after login:\", req.sessionID);\n      \n      // Force session regeneration to ensure new session ID\n      req.session.regenerate((err) => {\n        if (err) {\n          console.error(\"Session regeneration error:\", err);\n          return res.status(500).send(\"세션 생성 중 오류가 발생했습니다.\");\n        }\n        \n        (req.session as any).userId = user.id;\n        req.session.save((saveErr) => {\n          if (saveErr) {\n            console.error(\"Session save error:\", saveErr);\n            return res.status(500).send(\"세션 저장 중 오류가 발생했습니다.\");\n          }\n          console.log(\"Session saved successfully with ID:\", req.sessionID);\n          res.json({ id: user.id, username: user.username });\n        });\n      });\n    } catch (error) {\n      console.error(\"Login error:\", error);\n      res.status(500).send(\"로그인 중 오류가 발생했습니다.\");\n    }\n  });\n\n  app.post(\"/api/auth/logout\", (req, res) => {\n    req.session.destroy((err) => {\n      if (err) {\n        return res.status(500).send(\"로그아웃 중 오류가 발생했습니다.\");\n      }\n      res.clearCookie('sessionId');\n      res.json({ message: \"로그아웃되었습니다.\" });\n    });\n  });\n\n  app.get(\"/api/auth/me\", async (req, res) => {\n    try {\n      console.log(\"Session ID:\", req.sessionID);\n      console.log(\"Session data:\", req.session);\n      console.log(\"User ID from session:\", (req.session as any)?.userId);\n      \n      const userId = (req.session as any)?.userId;\n      if (!userId) {\n        return res.status(401).send(\"로그인이 필요합니다.\");\n      }\n\n      const user = await storage.getUser(userId);\n      if (!user) {\n        return res.status(404).send(\"사용자를 찾을 수 없습니다.\");\n      }\n\n      res.json({ id: user.id, username: user.username });\n    } catch (error) {\n      console.error(\"Get user error:\", error);\n      res.status(500).send(\"사용자 정보를 가져오는 중 오류가 발생했습니다.\");\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":4306},"server/storage.ts":{"content":"import { type User, type InsertUser } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\n// modify the interface with any CRUD methods\n// you might need\n\nexport interface IStorage {\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n\n  constructor() {\n    this.users = new Map();\n    // Add default user\n    const defaultUser: User = {\n      id: \"default-user-id\",\n      username: \"tlrrn\",\n      password: \"12345678a\"\n    };\n    this.users.set(defaultUser.id, defaultUser);\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { ...insertUser, id };\n    this.users.set(id, user);\n    return user;\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":1187},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\n","size_bytes":584},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport NotFound from \"@/pages/not-found\";\nimport Home from \"@/pages/Home\";\nimport Subscription from \"@/pages/Subscription\";\nimport Login from \"@/pages/Login\";\nimport Signup from \"@/pages/Signup\";\nimport MyPage from \"@/pages/MyPage\";\nimport HowItWorks from \"@/pages/HowItWorks\";\nimport Payment from \"@/pages/Payment\";\nimport PlantRecommendation from \"@/pages/PlantRecommendation\";\nimport PlantTips from \"@/pages/PlantTips\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route path=\"/subscription\" component={Subscription} />\n      <Route path=\"/how-it-works\" component={HowItWorks} />\n      <Route path=\"/plant-match\" component={PlantRecommendation} />\n      <Route path=\"/plant-tips\" component={PlantTips} />\n      <Route path=\"/payment\" component={Payment} />\n      <Route path=\"/login\" component={Login} />\n      <Route path=\"/signup\" component={Signup} />\n      <Route path=\"/mypage\" component={MyPage} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1494},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Noto+Sans+KR:wght@300;400;500;600;700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(222 84% 4.9%);\n  --card: hsl(0 0% 100%);\n  --card-foreground: hsl(222 84% 4.9%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(222 84% 4.9%);\n  --primary: hsl(82 57% 23%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(210 40% 98%);\n  --secondary-foreground: hsl(222 47% 11%);\n  --muted: hsl(210 40% 98%);\n  --muted-foreground: hsl(215 16% 47%);\n  --accent: hsl(210 40% 98%);\n  --accent-foreground: hsl(222 47% 11%);\n  --destructive: hsl(0 85% 60%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(214 32% 91%);\n  --input: hsl(214 32% 91%);\n  --ring: hsl(82 57% 23%);\n  --chart-1: hsl(82 57% 23%);\n  --chart-2: hsl(159 100% 36%);\n  --chart-3: hsl(42 93% 56%);\n  --chart-4: hsl(147 78% 42%);\n  --chart-5: hsl(341 75% 51%);\n  --sidebar: hsl(0 0% 100%);\n  --sidebar-foreground: hsl(222 84% 4.9%);\n  --sidebar-primary: hsl(82 57% 23%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(210 40% 98%);\n  --sidebar-accent-foreground: hsl(222 47% 11%);\n  --sidebar-border: hsl(214 32% 91%);\n  --sidebar-ring: hsl(82 57% 23%);\n  --font-sans: 'Noto Sans KR', sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.75rem;\n  --forest: hsl(82 57% 23%);\n  --olive: hsl(76 44% 35%);\n  --light-green: hsl(120 73% 75%);\n  --bg-soft: hsl(0 0% 98%);\n}\n\n.dark {\n  --background: hsl(222 84% 4.9%);\n  --foreground: hsl(210 40% 98%);\n  --card: hsl(222 84% 4.9%);\n  --card-foreground: hsl(210 40% 98%);\n  --popover: hsl(222 84% 4.9%);\n  --popover-foreground: hsl(210 40% 98%);\n  --primary: hsl(82 57% 23%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(217 33% 17%);\n  --secondary-foreground: hsl(210 40% 98%);\n  --muted: hsl(217 33% 17%);\n  --muted-foreground: hsl(215 20% 65%);\n  --accent: hsl(217 33% 17%);\n  --accent-foreground: hsl(210 40% 98%);\n  --destructive: hsl(0 63% 31%);\n  --destructive-foreground: hsl(210 40% 98%);\n  --border: hsl(217 33% 17%);\n  --input: hsl(217 33% 17%);\n  --ring: hsl(82 57% 23%);\n  --chart-1: hsl(82 57% 23%);\n  --chart-2: hsl(159 100% 36%);\n  --chart-3: hsl(42 93% 56%);\n  --chart-4: hsl(147 78% 42%);\n  --chart-5: hsl(341 75% 51%);\n  --sidebar: hsl(222 84% 4.9%);\n  --sidebar-foreground: hsl(210 40% 98%);\n  --sidebar-primary: hsl(82 57% 23%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(217 33% 17%);\n  --sidebar-accent-foreground: hsl(210 40% 98%);\n  --sidebar-border: hsl(217 33% 17%);\n  --sidebar-ring: hsl(82 57% 23%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n@layer utilities {\n  .text-balance {\n    text-wrap: balance;\n  }\n}\n\n","size_bytes":2902},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/Footer.tsx":{"content":"import { Twitter, Facebook, Instagram } from \"lucide-react\";\nimport { Link } from \"wouter\";\n\nexport default function Footer() {\n  return (\n    <footer className=\"bg-gray-900 text-white py-12\" data-testid=\"footer\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"grid md:grid-cols-3 gap-8\">\n          <div>\n            <h5 className=\"text-2xl font-bold mb-4\" data-testid=\"footer-logo\">식구</h5>\n            <p className=\"text-gray-400 leading-relaxed\" data-testid=\"footer-description\">\n              당신의 공간을 더욱 특별하게 만들어줄 프리미엄 식물 구독 서비스입니다.\n            </p>\n          </div>\n          \n          <div>\n            <h6 className=\"font-semibold mb-4\" data-testid=\"footer-services-title\">서비스</h6>\n            <ul className=\"space-y-2 text-gray-400\">\n              <li>\n                <Link href=\"/subscription\" className=\"hover:text-white transition-colors\" data-testid=\"link-plant-subscription\">\n                  식물 구독\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/how-it-works\" className=\"hover:text-white transition-colors\" data-testid=\"link-care-guide\">\n                  이용 가이드\n                </Link>\n              </li>\n            </ul>\n          </div>\n          \n          <div>\n            <h6 className=\"font-semibold mb-4\" data-testid=\"footer-follow-title\">팔로우</h6>\n            <div className=\"flex space-x-4 mb-4\">\n              <a href=\"#\" className=\"text-gray-400 hover:text-white transition-colors\" data-testid=\"link-twitter\">\n                <Twitter className=\"h-6 w-6\" />\n              </a>\n              <a href=\"#\" className=\"text-gray-400 hover:text-white transition-colors\" data-testid=\"link-facebook\">\n                <Facebook className=\"h-6 w-6\" />\n              </a>\n              <a href=\"#\" className=\"text-gray-400 hover:text-white transition-colors\" data-testid=\"link-instagram\">\n                <Instagram className=\"h-6 w-6\" />\n              </a>\n            </div>\n            <p className=\"text-gray-400\" data-testid=\"footer-website\">plantfamily.com</p>\n          </div>\n        </div>\n        \n        <div className=\"border-t border-gray-800 mt-8 pt-8 text-center text-gray-400\">\n          <p data-testid=\"footer-copyright\">&copy; 2025 식구. All rights reserved.</p>\n        </div>\n      </div>\n    </footer>\n  );\n}\n","size_bytes":2430},"client/src/components/Header.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { ShoppingCart, Menu, User, LogOut } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function Header() {\n  const { user, isAuthenticated, logout, isLogoutLoading } = useAuth();\n  const { toast } = useToast();\n\n  const handleLogout = async () => {\n    try {\n      await logout();\n      toast({\n        title: \"로그아웃 완료\",\n        description: \"다음에 또 방문해주세요!\",\n      });\n    } catch (error) {\n      toast({\n        title: \"로그아웃 실패\",\n        description: \"다시 시도해주세요.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  return (\n    <header className=\"bg-white shadow-sm border-b border-gray-100\" data-testid=\"header\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between items-center h-16\">\n          {/* Logo */}\n          <div className=\"flex-shrink-0\">\n            <Link href=\"/\" className=\"text-2xl font-bold text-forest hover:text-forest/90 transition-colors duration-200\" data-testid=\"logo\">\n              식구\n            </Link>\n          </div>\n          \n          {/* Navigation Menu */}\n          <nav className=\"hidden md:flex items-center space-x-6\" data-testid=\"nav-menu\">\n            <Link href=\"/subscription\" className=\"text-gray-700 hover:text-forest transition-colors duration-200 font-medium\" data-testid=\"link-subscription\">\n              구독\n            </Link>\n            <Link href=\"/how-it-works\" className=\"text-gray-700 hover:text-forest transition-colors duration-200 font-medium\" data-testid=\"link-how-it-works\">\n              이용가이드\n            </Link>\n            \n            {isAuthenticated ? (\n              <>\n                <span className=\"text-gray-700 font-medium\" data-testid=\"user-greeting\">\n                  안녕하세요, {user?.username}님\n                </span>\n                <Link href=\"/mypage\" className=\"text-gray-700 hover:text-forest transition-colors duration-200 font-medium\" data-testid=\"link-mypage\">\n                  마이페이지\n                </Link>\n                <Button \n                  onClick={handleLogout}\n                  disabled={isLogoutLoading}\n                  className=\"bg-forest text-white hover:bg-forest/90 font-medium\" \n                  data-testid=\"button-logout\"\n                >\n                  <LogOut className=\"h-4 w-4 mr-2\" />\n                  {isLogoutLoading ? \"로그아웃 중...\" : \"로그아웃\"}\n                </Button>\n              </>\n            ) : (\n              <Link href=\"/login\">\n                <Button className=\"bg-forest text-white hover:bg-forest/90 font-medium\" data-testid=\"button-login\">\n                  로그인\n                </Button>\n              </Link>\n            )}\n            \n            <Link href=\"/cart\" className=\"relative p-2 text-gray-700 hover:text-forest transition-colors duration-200\" data-testid=\"button-cart\">\n              <ShoppingCart className=\"h-6 w-6\" />\n              <span className=\"absolute -top-1 -right-1 bg-red-500 text-white text-xs rounded-full h-5 w-5 flex items-center justify-center font-medium\" data-testid=\"cart-count\">\n                2\n              </span>\n            </Link>\n          </nav>\n          \n          {/* Mobile menu button */}\n          <div className=\"md:hidden\">\n            <button className=\"text-gray-700 hover:text-forest\" data-testid=\"button-mobile-menu\">\n              <Menu className=\"h-6 w-6\" />\n            </button>\n          </div>\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":3694},"client/src/components/Hero.tsx":{"content":"import { Link } from \"wouter\";\n\nexport default function Hero() {\n  return (\n    <section \n      className=\"relative py-16 lg:py-20 bg-cover bg-center bg-no-repeat\"\n      style={{\n        backgroundImage: `linear-gradient(rgba(0, 0, 0, 0.4), rgba(0, 0, 0, 0.4)), url('https://images.unsplash.com/photo-1441974231531-c6227db76b6e?ixlib=rb-4.0.3&auto=format&fit=crop&w=2000&h=1000')`\n      }}\n      data-testid=\"hero-section\"\n    >\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"text-center\">\n          <Link href=\"/plant-match\" className=\"inline-block cursor-pointer group\" data-testid=\"hero-link\">\n            <h2 className=\"text-4xl lg:text-6xl font-bold text-white mb-6 leading-tight group-hover:text-green-200 transition-colors duration-300\" data-testid=\"hero-title\">\n              Find Your Plant Match\n            </h2>\n            <p className=\"text-xl lg:text-2xl text-green-100 mb-8 leading-relaxed group-hover:text-white transition-colors duration-300 max-w-3xl mx-auto\" data-testid=\"hero-description\">\n              당신의 공간에 완벽한 식물을 찾아보세요. 전문가가 선별한 프리미엄 식물들로 당신의 일상을 더욱 특별하게 만들어드립니다.\n            </p>\n          </Link>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":1319},"client/src/components/PlantsGallery.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { useState, useEffect } from \"react\";\nimport { Leaf } from \"lucide-react\";\nimport { Link } from \"wouter\";\n\nconst plants = [\n  // 소형 식물\n  {\n    id: 1,\n    name: \"틸란드시아\",\n    coins: 1,\n    size: \"소형\",\n    lightCondition: \"반음지\",\n    difficulty: \"쉬움\",\n    humidity: \"건조\",\n    image: \"\",\n    alt: \"틸란드시아\"\n  },\n  {\n    id: 2,\n    name: \"미니 선인장\",\n    coins: 1,\n    size: \"소형\",\n    lightCondition: \"햇빛 직사광\",\n    difficulty: \"쉬움\",\n    humidity: \"건조\",\n    image: \"\",\n    alt: \"미니 선인장\"\n  },\n  {\n    id: 3,\n    name: \"칼라데아 오르비폴리아\",\n    coins: 1,\n    size: \"소형\",\n    lightCondition: \"간접광\",\n    difficulty: \"어려움\",\n    humidity: \"습함\",\n    image: \"\",\n    alt: \"칼라데아 오르비폴리아\"\n  },\n  {\n    id: 4,\n    name: \"스킨답서스\",\n    coins: 1,\n    size: \"소형\",\n    lightCondition: \"반음지/음지\",\n    difficulty: \"쉬움\",\n    humidity: \"보통\",\n    image: \"\",\n    alt: \"스킨답서스\"\n  },\n  // 중형 식물\n  {\n    id: 5,\n    name: \"몬스테라\",\n    coins: 2,\n    size: \"중형\",\n    lightCondition: \"간접광\",\n    difficulty: \"보통\",\n    humidity: \"보통\",\n    image: \"\",\n    alt: \"몬스테라\"\n  },\n  {\n    id: 6,\n    name: \"여인초\",\n    coins: 2,\n    size: \"중형\",\n    lightCondition: \"햇빛 직사광\",\n    difficulty: \"보통\",\n    humidity: \"보통\",\n    image: \"\",\n    alt: \"여인초\"\n  },\n  {\n    id: 7,\n    name: \"스파티필룸\",\n    coins: 2,\n    size: \"중형\",\n    lightCondition: \"반음지/음지\",\n    difficulty: \"쉬움\",\n    humidity: \"습함\",\n    image: \"\",\n    alt: \"스파티필룸\"\n  },\n  {\n    id: 8,\n    name: \"아레카야자\",\n    coins: 2,\n    size: \"중형\",\n    lightCondition: \"반음지\",\n    difficulty: \"보통\",\n    humidity: \"보통\",\n    image: \"\",\n    alt: \"아레카야자\"\n  },\n  // 대형 식물\n  {\n    id: 9,\n    name: \"고무나무\",\n    coins: 3,\n    size: \"대형\",\n    lightCondition: \"간접광\",\n    difficulty: \"쉬움\",\n    humidity: \"건조\",\n    image: \"\",\n    alt: \"고무나무\"\n  },\n  {\n    id: 10,\n    name: \"극락조\",\n    coins: 3,\n    size: \"대형\",\n    lightCondition: \"햇빛 직사광\",\n    difficulty: \"보통\",\n    humidity: \"보통\",\n    image: \"\",\n    alt: \"극락조\"\n  },\n  {\n    id: 11,\n    name: \"유포르비아 트리코나\",\n    coins: 3,\n    size: \"대형\",\n    lightCondition: \"햇빛 직사광\",\n    difficulty: \"쉬움\",\n    humidity: \"건조\",\n    image: \"\",\n    alt: \"유포르비아 트리코나\"\n  },\n  {\n    id: 12,\n    name: \"필로덴드론 콩고\",\n    coins: 3,\n    size: \"대형\",\n    lightCondition: \"반음지\",\n    difficulty: \"쉬움\",\n    humidity: \"보통\",\n    image: \"\",\n    alt: \"필로덴드론 콩고\"\n  }\n];\n\nexport default function PlantsGallery() {\n  const [activeTab, setActiveTab] = useState(\"소형\");\n\n  // 식물을 크기별로 분류\n  const plantsBySize = {\n    \"소형\": plants.filter(plant => plant.size === \"소형\"),\n    \"중형\": plants.filter(plant => plant.size === \"중형\"),\n    \"대형\": plants.filter(plant => plant.size === \"대형\")\n  };\n\n  const tabs = [\n    { id: \"소형\", label: \"소형 식물\", count: plantsBySize[\"소형\"].length },\n    { id: \"중형\", label: \"중형 식물\", count: plantsBySize[\"중형\"].length },\n    { id: \"대형\", label: \"대형 식물\", count: plantsBySize[\"대형\"].length }\n  ];\n\n  // 5초마다 자동으로 탭 순환\n  useEffect(() => {\n    const tabIds = tabs.map(tab => tab.id);\n    const interval = setInterval(() => {\n      setActiveTab(prevTab => {\n        const currentIndex = tabIds.indexOf(prevTab);\n        const nextIndex = (currentIndex + 1) % tabIds.length;\n        return tabIds[nextIndex];\n      });\n    }, 5000); // 5초마다 변경\n\n    return () => clearInterval(interval);\n  }, []);\n\n  return (\n    <section className=\"py-16 bg-bg-soft\" data-testid=\"plants-gallery\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <h3 className=\"text-3xl font-bold text-forest text-center mb-12\" data-testid=\"gallery-title\">\n          둘러보기\n        </h3>\n\n        {/* 탭 네비게이션 */}\n        <div className=\"flex justify-center mb-8\">\n          <div className=\"flex bg-white rounded-lg p-1 shadow-sm border border-gray-200\">\n            {tabs.map((tab) => (\n              <button\n                key={tab.id}\n                onClick={() => setActiveTab(tab.id)}\n                className={`px-6 py-3 rounded-md text-sm font-medium transition-all duration-200 ${\n                  activeTab === tab.id\n                    ? \"bg-forest text-white shadow-sm\"\n                    : \"text-gray-600 hover:text-gray-900 hover:bg-gray-50\"\n                }`}\n                data-testid={`tab-${tab.id}`}\n              >\n                {tab.label} ({tab.count})\n              </button>\n            ))}\n          </div>\n        </div>\n\n        {/* 식물 그리드 - 4개씩 1단 */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 lg:gap-8\">\n          {plantsBySize[activeTab as keyof typeof plantsBySize].map((plant) => (\n            <Link key={plant.id} href={`/plant/${plant.id}`}>\n              <Card \n                className=\"bg-white rounded-2xl shadow-md hover:shadow-lg transition-shadow duration-300 overflow-hidden cursor-pointer\"\n                data-testid={`card-plant-${plant.id}`}\n              >\n                <div className=\"relative\">\n                  <img \n                    src={plant.image}\n                    alt={plant.alt}\n                    className=\"w-full h-48 object-cover\"\n                    data-testid={`img-plant-${plant.id}`}\n                  />\n                  <div className=\"absolute top-3 right-3 bg-white rounded-full px-3 py-1 shadow-md flex items-center space-x-1\">\n                    <Leaf className=\"h-4 w-4 text-green-500\" />\n                    <span className=\"text-sm font-bold text-gray-900\" data-testid={`text-plant-coins-${plant.id}`}>\n                      {plant.coins}\n                    </span>\n                  </div>\n                </div>\n                <CardContent className=\"p-4\">\n                  <h4 className=\"font-semibold text-gray-900 mb-1\" data-testid={`text-plant-name-${plant.id}`}>\n                    {plant.name}\n                  </h4>\n                  <p className=\"text-sm text-gray-500\" data-testid={`text-plant-size-${plant.id}`}>\n                    {plant.size} 식물\n                  </p>\n                </CardContent>\n              </Card>\n            </Link>\n          ))}\n        </div>\n\n        {/* 캐러셀 인디케이터 */}\n        <div className=\"flex justify-center mt-8 space-x-2\">\n          {tabs.map((tab, index) => (\n            <button\n              key={tab.id}\n              onClick={() => setActiveTab(tab.id)}\n              className={`w-3 h-3 rounded-full transition-colors duration-300 ${\n                activeTab === tab.id \n                  ? 'bg-forest' \n                  : 'bg-gray-300'\n              }`}\n              data-testid={`carousel-indicator-${tab.id}`}\n            />\n          ))}\n        </div>\n      </div>\n    </section>\n  );\n}","size_bytes":7217},"client/src/components/ReviewSection.tsx":{"content":"import { Star, Clock, Sprout, Sun, Droplets, Thermometer, Wind, ChevronRight } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Link } from \"wouter\";\n\nconst userReviews = [\n  {\n    id: 1,\n    name: \"김민정\",\n    rating: 5,\n    review: \"처음 식물을 키우는 저에게 너무 친절하게 설명해주시고, 식물도 정말 건강하게 잘 자라고 있어요. 매달 새로운 식물을 받는 재미가 쏠쏠합니다!\"\n  },\n  {\n    id: 2,\n    name: \"박서준\",\n    rating: 5,\n    review: \"사무실에 놓을 식물을 찾고 있었는데, 추천해주신 식물들이 모두 공기정화에도 좋고 관리하기도 쉬워서 동료들이 다들 좋아해요.\"\n  },\n  {\n    id: 3,\n    name: \"이하늘\",\n    rating: 5,\n    review: \"식물 케어 팁이 정말 유용해요. 물주기 알림도 보내주시고, 궁금한 건 언제든 문의할 수 있어서 안심이 됩니다.\"\n  }\n];\n\nconst plantTips = [\n  {\n    id: 1,\n    title: \"몬스테라 관리법\",\n    content: \"밝은 간접광을 좋아하며, 주 1-2회 물을 주세요. 잎에 분무기로 습도를 유지해주면 더욱 건강하게 자랍니다.\",\n    icon: Clock,\n    tag: \"난이도: 초급\",\n    borderColor: \"border-l-4 border-forest\"\n  },\n  {\n    id: 2,\n    title: \"스네이크 플랜트\",\n    content: \"매우 강한 식물로 초보자에게 추천! 2-3주에 한 번만 물을 주면 되고, 어두운 곳에서도 잘 자랍니다.\",\n    icon: Sprout,\n    tag: \"공기정화 우수\",\n    borderColor: \"border-l-4 border-olive\"\n  },\n  {\n    id: 3,\n    title: \"고무나무 케어\",\n    content: \"광택이 나는 큰 잎이 특징인 고무나무는 밝은 빛을 좋아해요. 잎에 먼지가 쌓이지 않도록 가끔 닦아주세요.\",\n    icon: Sun,\n    tag: \"밝은 간접광 선호\",\n    borderColor: \"border-l-4 border-green-400\"\n  }\n];\n\nexport default function ReviewSection() {\n  return (\n    <section className=\"py-16 bg-bg-soft\" data-testid=\"review-section\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n\n        <div className=\"grid lg:grid-cols-2 gap-12\">\n          {/* User Reviews */}\n          <div>\n            <div className=\"flex items-center mb-8\">\n              <Star className=\"text-yellow-400 h-6 w-6 mr-2\" data-testid=\"icon-star\" />\n              <h4 className=\"text-2xl font-bold text-gray-900\" data-testid=\"user-reviews-title\">\n                사용자 후기\n              </h4>\n            </div>\n\n            <div className=\"space-y-6\">\n              {userReviews.map((review) => (\n                <div\n                  key={review.id}\n                  className=\"bg-white p-6 rounded-2xl shadow-md\"\n                  data-testid={`review-${review.id}`}\n                >\n                  <div className=\"flex items-center mb-4\">\n                    <div className=\"flex text-yellow-400 mr-3\">\n                      {[...Array(review.rating)].map((_, i) => (\n                        <Star key={i} className=\"h-4 w-4 fill-current\" data-testid={`star-${review.id}-${i}`} />\n                      ))}\n                    </div>\n                    <span className=\"font-semibold text-gray-900\" data-testid={`reviewer-name-${review.id}`}>\n                      {review.name}\n                    </span>\n                  </div>\n                  <p className=\"text-gray-600 leading-relaxed\" data-testid={`review-content-${review.id}`}>\n                    \"{review.review}\"\n                  </p>\n                </div>\n              ))}\n\n              {/* More Reviews Button */}\n              <div className=\"text-center\">\n                <Link href=\"/reviews\">\n                  <Button\n                    variant=\"outline\"\n                    className=\"border-forest text-forest hover:bg-forest hover:text-white transition-colors duration-300\"\n                    data-testid=\"button-more-reviews\"\n                  >\n                    더보기\n                    <ChevronRight className=\"ml-2 h-4 w-4\" />\n                  </Button>\n                </Link>\n              </div>\n            </div>\n          </div>\n\n          {/* Plant Care Tips */}\n          <div>\n            <div className=\"flex items-center mb-8\">\n              <Sprout className=\"text-forest h-6 w-6 mr-2\" data-testid=\"icon-leaf\" />\n              <h4 className=\"text-2xl font-bold text-gray-900\" data-testid=\"plant-tips-title\">\n                식물별 팁\n              </h4>\n            </div>\n\n            <div className=\"space-y-6\">\n              {plantTips.map((tip) => {\n                const IconComponent = tip.icon;\n                return (\n                  <div\n                    key={tip.id}\n                    className={`bg-white p-6 rounded-2xl shadow-md ${tip.borderColor}`}\n                    data-testid={`tip-${tip.id}`}\n                  >\n                    <h5 className=\"font-bold text-gray-900 mb-3 text-lg\" data-testid={`tip-title-${tip.id}`}>\n                      {tip.title}\n                    </h5>\n                    <p className=\"text-gray-600 leading-relaxed mb-3\" data-testid={`tip-content-${tip.id}`}>\n                      {tip.content}\n                    </p>\n                    <div className=\"flex items-center text-sm text-forest\">\n                      <IconComponent className=\"h-4 w-4 mr-2\" data-testid={`tip-icon-${tip.id}`} />\n                      <span data-testid={`tip-tag-${tip.id}`}>{tip.tag}</span>\n                    </div>\n                  </div>\n                );\n              })}\n\n              {/* General Plant Care Tips */}\n              <div className=\"bg-white p-6 rounded-2xl shadow-md border-l-4 border-light-green\" data-testid=\"general-tips\">\n                <h5 className=\"font-bold text-gray-900 mb-3 text-lg\" data-testid=\"general-tips-title\">\n                  일반적인 식물 관리\n                </h5>\n                <div className=\"space-y-2 text-gray-600\">\n                  <p className=\"flex items-center\" data-testid=\"tip-watering\">\n                    <Droplets className=\"text-blue-500 h-4 w-4 mr-3\" />\n                    흙이 마르면 충분히 물주기\n                  </p>\n                  <p className=\"flex items-center\" data-testid=\"tip-temperature\">\n                    <Thermometer className=\"text-red-500 h-4 w-4 mr-3\" />\n                    실온 18-24도 유지하기\n                  </p>\n                  <p className=\"flex items-center\" data-testid=\"tip-ventilation\">\n                    <Wind className=\"text-gray-500 h-4 w-4 mr-3\" />\n                    통풍이 잘 되는 곳에 배치\n                  </p>\n                </div>\n              </div>\n\n              {/* More Plant Tips Button */}\n              <div className=\"text-center\">\n                <Link href=\"/plant-tips\">\n                  <Button\n                    variant=\"outline\"\n                    className=\"border-forest text-forest hover:bg-forest hover:text-white transition-colors duration-300\"\n                    data-testid=\"button-more-tips\"\n                  >\n                    더보기\n                    <ChevronRight className=\"ml-2 h-4 w-4\" />\n                  </Button>\n                </Link>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}","size_bytes":7277},"client/src/components/SubscriptionPlans.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Link } from \"wouter\";\nimport { Leaf } from \"lucide-react\";\n\nconst subscriptionPlans = [\n  {\n    id: 1,\n    coins: 1,\n    title: \"1코인\",\n    price: \"4,900원\",\n    bgColor: \"bg-gradient-to-br from-green-50 to-green-100\",\n    borderColor: \"border-green-200\",\n    popular: false\n  },\n  {\n    id: 2,\n    coins: 2,\n    title: \"2코인\",\n    price: \"9,900원\",\n    bgColor: \"bg-gradient-to-br from-green-100 to-green-200\",\n    borderColor: \"border-green-300\",\n    popular: false\n  },\n  {\n    id: 3,\n    coins: 5,\n    title: \"5코인\",\n    price: \"23,900원\",\n    bgColor: \"bg-gradient-to-br from-green-200 to-green-300\",\n    borderColor: \"border-green-400\",\n    popular: true\n  },\n  {\n    id: 4,\n    coins: 10,\n    title: \"10코인\",\n    price: \"44,900원\",\n    bgColor: \"bg-gradient-to-br from-green-300 to-green-400\",\n    borderColor: \"border-green-500\",\n    popular: false\n  }\n];\n\nexport default function SubscriptionPlans() {\n  return (\n    <section className=\"py-16 bg-white\" data-testid=\"subscription-plans\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <h3 className=\"text-3xl font-bold text-forest text-center mb-12\" data-testid=\"subscription-title\">\n          나만의 구독제를 선택하세요!\n        </h3>\n        \n        <div className=\"grid md:grid-cols-2 lg:grid-cols-4 gap-8 max-w-6xl mx-auto\">\n          {subscriptionPlans.map((plan) => (\n            <div \n              key={plan.id}\n              className={`${plan.bgColor} rounded-2xl p-8 text-center border ${plan.borderColor} hover:shadow-lg transition-shadow duration-300 relative ${plan.popular ? 'transform scale-105' : ''}`}\n              data-testid={`plan-${plan.coins}-coin`}\n            >\n              {plan.popular && (\n                <div className=\"absolute -top-3 left-1/2 transform -translate-x-1/2 bg-red-500 text-white px-3 py-1 rounded-full text-sm font-medium\" data-testid=\"popular-badge\">\n                  인기\n                </div>\n              )}\n              <div className=\"w-16 h-16 rounded-full mx-auto mb-4 bg-green-100 flex items-center justify-center\">\n                <div className=\"flex items-center space-x-1\">\n                  <Leaf className=\"h-6 w-6 text-green-600\" />\n                  <span className=\"text-lg font-bold text-gray-900\">{plan.coins}</span>\n                </div>\n              </div>\n              <h4 className=\"text-xl font-bold text-gray-900 mb-6\" data-testid={`text-plan-title-${plan.coins}`}>\n                {plan.title}\n              </h4>\n              <p className=\"text-3xl font-bold text-forest mb-6\" data-testid={`text-plan-price-${plan.coins}`}>\n                {plan.price}\n              </p>\n              <Link href={`/payment?plan=${plan.coins}`} className=\"block\">\n                <Button \n                  className=\"w-full bg-forest text-white hover:bg-forest/90 py-3 font-medium\"\n                  data-testid={`button-select-${plan.coins}`}\n                >\n                  선택하기\n                </Button>\n              </Link>\n            </div>\n          ))}\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":3164},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface User {\n  id: string;\n  username: string;\n}\n\nexport function useAuth() {\n  const queryClient = useQueryClient();\n\n  const { data: user, isLoading } = useQuery<User>({\n    queryKey: [\"/api/auth/me\"],\n    retry: false,\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async ({ username, password }: { username: string; password: string }) => {\n      const response = await fetch(\"/api/auth/login\", {\n        method: \"POST\",\n        body: JSON.stringify({ username, password }),\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        credentials: \"include\",\n      });\n      \n      if (!response.ok) {\n        const error = await response.text();\n        throw new Error(error);\n      }\n      \n      return response.json();\n    },\n    onSuccess: (data) => {\n      queryClient.setQueryData([\"/api/auth/me\"], data);\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/me\"] });\n    },\n  });\n\n  const logoutMutation = useMutation({\n    mutationFn: async () => {\n      const response = await fetch(\"/api/auth/logout\", {\n        method: \"POST\",\n        credentials: \"include\",\n      });\n      \n      if (!response.ok) {\n        const error = await response.text();\n        throw new Error(error);\n      }\n      \n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.setQueryData([\"/api/auth/me\"], null);\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/me\"] });\n    },\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n    login: loginMutation.mutateAsync,\n    logout: logoutMutation.mutateAsync,\n    isLoginLoading: loginMutation.isPending,\n    isLogoutLoading: logoutMutation.isPending,\n  };\n}","size_bytes":1828},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/Home.tsx":{"content":"import Header from \"@/components/Header\";\nimport Hero from \"@/components/Hero\";\nimport PlantsGallery from \"@/components/PlantsGallery\";\nimport SubscriptionPlans from \"@/components/SubscriptionPlans\";\nimport ReviewSection from \"@/components/ReviewSection\";\nimport Footer from \"@/components/Footer\";\n\nexport default function Home() {\n  return (\n    <div className=\"min-h-screen bg-bg-soft\">\n      <Header />\n      <Hero />\n      <PlantsGallery />\n      <SubscriptionPlans />\n      <ReviewSection />\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":532},"client/src/pages/Login.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Link, useLocation } from \"wouter\";\nimport { Eye, EyeOff, Leaf } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function Login() {\n  const [, setLocation] = useLocation();\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [showPassword, setShowPassword] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const { toast } = useToast();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n\n    try {\n      const response = await fetch(\"/api/auth/login\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ username, password }),\n      });\n\n      if (response.ok) {\n        toast({\n          title: \"로그인 성공\",\n          description: \"환영합니다!\",\n        });\n        setLocation(\"/\");\n      } else {\n        const error = await response.text();\n        toast({\n          title: \"로그인 실패\",\n          description: error || \"아이디 또는 비밀번호를 확인해주세요.\",\n          variant: \"destructive\",\n        });\n      }\n    } catch (error) {\n      toast({\n        title: \"오류 발생\",\n        description: \"로그인 중 오류가 발생했습니다.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-green-50 to-emerald-50 flex items-center justify-center p-4\">\n      {/* Header */}\n      <div className=\"absolute top-0 left-0 right-0 bg-white shadow-sm border-b border-gray-100\" data-testid=\"header\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center h-16\">\n            <Link href=\"/\" className=\"text-2xl font-bold text-forest hover:text-forest/90 transition-colors duration-200\" data-testid=\"logo\">\n              식구\n            </Link>\n          </div>\n        </div>\n      </div>\n\n      <Card className=\"w-full max-w-md mx-auto mt-16\" data-testid=\"login-card\">\n        <CardHeader className=\"text-center\">\n          <div className=\"w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n            <Leaf className=\"h-8 w-8 text-green-600\" />\n          </div>\n          <CardTitle className=\"text-2xl font-bold text-gray-900\" data-testid=\"login-title\">\n            로그인\n          </CardTitle>\n          <p className=\"text-gray-600 mt-2\" data-testid=\"login-description\">\n            식구 계정으로 로그인하세요\n          </p>\n        </CardHeader>\n        \n        <CardContent>\n          <form onSubmit={handleSubmit} className=\"space-y-6\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"username\" className=\"text-sm font-medium text-gray-700\">\n                아이디\n              </Label>\n              <Input\n                id=\"username\"\n                type=\"text\"\n                value={username}\n                onChange={(e) => setUsername(e.target.value)}\n                placeholder=\"아이디를 입력하세요\"\n                required\n                className=\"w-full\"\n                data-testid=\"input-username\"\n              />\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"password\" className=\"text-sm font-medium text-gray-700\">\n                비밀번호\n              </Label>\n              <div className=\"relative\">\n                <Input\n                  id=\"password\"\n                  type={showPassword ? \"text\" : \"password\"}\n                  value={password}\n                  onChange={(e) => setPassword(e.target.value)}\n                  placeholder=\"비밀번호를 입력하세요\"\n                  required\n                  className=\"w-full pr-10\"\n                  data-testid=\"input-password\"\n                />\n                <button\n                  type=\"button\"\n                  onClick={() => setShowPassword(!showPassword)}\n                  className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600\"\n                  data-testid=\"button-toggle-password\"\n                >\n                  {showPassword ? (\n                    <EyeOff className=\"h-4 w-4\" />\n                  ) : (\n                    <Eye className=\"h-4 w-4\" />\n                  )}\n                </button>\n              </div>\n            </div>\n            \n            <Button\n              type=\"submit\"\n              className=\"w-full bg-forest text-white hover:bg-forest/90 py-2\"\n              disabled={isLoading}\n              data-testid=\"button-login\"\n            >\n              {isLoading ? \"로그인 중...\" : \"로그인\"}\n            </Button>\n          </form>\n          \n          <div className=\"mt-6 text-center\">\n            <p className=\"text-sm text-gray-600\" data-testid=\"signup-prompt\">\n              아직 계정이 없으신가요?\n            </p>\n            <Link href=\"/signup\">\n              <Button\n                variant=\"outline\"\n                className=\"mt-2 w-full border-forest text-forest hover:bg-forest hover:text-white\"\n                data-testid=\"button-signup\"\n              >\n                회원가입\n              </Button>\n            </Link>\n          </div>\n          \n          <div className=\"mt-4 text-center\">\n            <Link href=\"/forgot-password\" className=\"text-sm text-forest hover:text-forest/80\" data-testid=\"link-forgot-password\">\n              비밀번호를 잊으셨나요?\n            </Link>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":5978},"client/src/pages/MyPage.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Link } from \"wouter\";\nimport { User, Settings, CreditCard, Package, Calendar, Leaf } from \"lucide-react\";\nimport { useAuth } from \"@/hooks/useAuth\";\n\nexport default function MyPage() {\n  const { user, isAuthenticated, isLoading } = useAuth();\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-green-50 to-emerald-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-forest mx-auto mb-4\"></div>\n          <p className=\"text-gray-600\">로딩 중...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-green-50 to-emerald-50 flex items-center justify-center\">\n        <Card className=\"w-full max-w-md mx-auto\">\n          <CardContent className=\"text-center py-8\">\n            <User className=\"h-16 w-16 text-gray-400 mx-auto mb-4\" />\n            <h2 className=\"text-xl font-semibold text-gray-900 mb-2\">로그인이 필요합니다</h2>\n            <p className=\"text-gray-600 mb-6\">마이페이지를 이용하려면 로그인해주세요.</p>\n            <Link href=\"/login\">\n              <Button className=\"bg-forest text-white hover:bg-forest/90\">\n                로그인하기\n              </Button>\n            </Link>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-green-50 to-emerald-50\">\n      {/* Header */}\n      <header className=\"bg-white shadow-sm border-b border-gray-100\" data-testid=\"header\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center h-16\">\n            <Link href=\"/\" className=\"text-2xl font-bold text-forest hover:text-forest/90 transition-colors duration-200\" data-testid=\"logo\">\n              식구\n            </Link>\n            <nav className=\"flex items-center space-x-6\">\n              <Link href=\"/subscription\" className=\"text-gray-700 hover:text-forest transition-colors duration-200 font-medium\" data-testid=\"link-subscription\">\n                구독\n              </Link>\n              <Link href=\"/how-it-works\" className=\"text-gray-700 hover:text-forest transition-colors duration-200 font-medium\" data-testid=\"link-how-it-works\">\n                이용가이드\n              </Link>\n              <Link href=\"/mypage\" className=\"text-forest font-medium\" data-testid=\"link-mypage\">\n                마이페이지\n              </Link>\n            </nav>\n          </div>\n        </div>\n      </header>\n\n      <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Page Header */}\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-gray-900 mb-2\" data-testid=\"mypage-title\">\n            마이페이지\n          </h1>\n          <p className=\"text-gray-600\" data-testid=\"mypage-subtitle\">\n            {user?.username}님의 계정 정보와 구독 상태를 관리할 수 있습니다.\n          </p>\n        </div>\n\n        <Tabs defaultValue=\"profile\" className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-3\">\n            <TabsTrigger value=\"profile\" className=\"flex items-center space-x-2\">\n              <User className=\"h-4 w-4\" />\n              <span>내 정보</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"subscription\" className=\"flex items-center space-x-2\">\n              <Package className=\"h-4 w-4\" />\n              <span>구독 관리</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"settings\" className=\"flex items-center space-x-2\">\n              <Settings className=\"h-4 w-4\" />\n              <span>설정</span>\n            </TabsTrigger>\n          </TabsList>\n\n          {/* 내 정보 탭 */}\n          <TabsContent value=\"profile\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <User className=\"h-5 w-5\" />\n                  <span>계정 정보</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <label className=\"text-sm font-medium text-gray-700\">아이디</label>\n                    <p className=\"text-gray-900 font-medium mt-1\">{user?.username}</p>\n                  </div>\n                  <div>\n                    <label className=\"text-sm font-medium text-gray-700\">가입일</label>\n                    <p className=\"text-gray-900 font-medium mt-1\">2024년 8월</p>\n                  </div>\n                </div>\n                <div className=\"pt-4 border-t\">\n                  <Button variant=\"outline\" className=\"border-forest text-forest hover:bg-forest hover:text-white\">\n                    정보 수정\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* 구독 관리 탭 */}\n          <TabsContent value=\"subscription\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <Package className=\"h-5 w-5\" />\n                  <span>현재 구독 상태</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-center py-8\">\n                  <Leaf className=\"h-16 w-16 text-gray-400 mx-auto mb-4\" />\n                  <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">구독 중인 플랜이 없습니다</h3>\n                  <p className=\"text-gray-600 mb-6\">지금 구독을 시작하고 멋진 식물들을 만나보세요!</p>\n                  <Link href=\"/subscription\">\n                    <Button className=\"bg-forest text-white hover:bg-forest/90\">\n                      구독 시작하기\n                    </Button>\n                  </Link>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* 구독 히스토리 */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <Calendar className=\"h-5 w-5\" />\n                  <span>구독 히스토리</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-center py-8\">\n                  <p className=\"text-gray-500\">구독 이력이 없습니다.</p>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* 설정 탭 */}\n          <TabsContent value=\"settings\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <Settings className=\"h-5 w-5\" />\n                  <span>계정 설정</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"flex items-center justify-between p-4 border rounded-lg\">\n                  <div>\n                    <h4 className=\"font-medium text-gray-900\">비밀번호 변경</h4>\n                    <p className=\"text-sm text-gray-600\">계정 보안을 위해 정기적으로 비밀번호를 변경하세요.</p>\n                  </div>\n                  <Button variant=\"outline\" className=\"border-forest text-forest hover:bg-forest hover:text-white\">\n                    변경\n                  </Button>\n                </div>\n                \n                <div className=\"flex items-center justify-between p-4 border rounded-lg\">\n                  <div>\n                    <h4 className=\"font-medium text-gray-900\">알림 설정</h4>\n                    <p className=\"text-sm text-gray-600\">식물 관리 알림 및 구독 정보를 받아보세요.</p>\n                  </div>\n                  <Button variant=\"outline\" className=\"border-forest text-forest hover:bg-forest hover:text-white\">\n                    설정\n                  </Button>\n                </div>\n\n                <div className=\"pt-4 border-t\">\n                  <div className=\"flex items-center justify-between p-4 border border-red-200 rounded-lg bg-red-50\">\n                    <div>\n                      <h4 className=\"font-medium text-red-900\">계정 삭제</h4>\n                      <p className=\"text-sm text-red-600\">계정을 삭제하면 모든 데이터가 영구적으로 삭제됩니다.</p>\n                    </div>\n                    <Button variant=\"outline\" className=\"border-red-500 text-red-500 hover:bg-red-500 hover:text-white\">\n                      삭제\n                    </Button>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}","size_bytes":9310},"client/src/pages/Signup.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Link, useLocation } from \"wouter\";\nimport { Eye, EyeOff, Leaf, Check, X } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function Signup() {\n  const [, setLocation] = useLocation();\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\n  const [showPassword, setShowPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const { toast } = useToast();\n\n  const isPasswordValid = password.length >= 8;\n  const isPasswordMatch = password === confirmPassword && confirmPassword !== \"\";\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!isPasswordValid) {\n      toast({\n        title: \"비밀번호 오류\",\n        description: \"비밀번호는 8자 이상이어야 합니다.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (!isPasswordMatch) {\n      toast({\n        title: \"비밀번호 불일치\",\n        description: \"비밀번호가 일치하지 않습니다.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsLoading(true);\n\n    try {\n      const response = await fetch(\"/api/auth/signup\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ username, password }),\n      });\n\n      if (response.ok) {\n        toast({\n          title: \"회원가입 성공\",\n          description: \"환영합니다! 로그인해주세요.\",\n        });\n        setLocation(\"/login\");\n      } else {\n        const error = await response.text();\n        toast({\n          title: \"회원가입 실패\",\n          description: error || \"회원가입 중 오류가 발생했습니다.\",\n          variant: \"destructive\",\n        });\n      }\n    } catch (error) {\n      toast({\n        title: \"오류 발생\",\n        description: \"회원가입 중 오류가 발생했습니다.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-green-50 to-emerald-50 flex items-center justify-center p-4\">\n      {/* Header */}\n      <div className=\"absolute top-0 left-0 right-0 bg-white shadow-sm border-b border-gray-100\" data-testid=\"header\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center h-16\">\n            <Link href=\"/\" className=\"text-2xl font-bold text-forest hover:text-forest/90 transition-colors duration-200\" data-testid=\"logo\">\n              식구\n            </Link>\n          </div>\n        </div>\n      </div>\n\n      <Card className=\"w-full max-w-md mx-auto mt-16\" data-testid=\"signup-card\">\n        <CardHeader className=\"text-center\">\n          <div className=\"w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n            <Leaf className=\"h-8 w-8 text-green-600\" />\n          </div>\n          <CardTitle className=\"text-2xl font-bold text-gray-900\" data-testid=\"signup-title\">\n            회원가입\n          </CardTitle>\n          <p className=\"text-gray-600 mt-2\" data-testid=\"signup-description\">\n            식구와 함께 시작하세요\n          </p>\n        </CardHeader>\n        \n        <CardContent>\n          <form onSubmit={handleSubmit} className=\"space-y-6\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"username\" className=\"text-sm font-medium text-gray-700\">\n                아이디\n              </Label>\n              <Input\n                id=\"username\"\n                type=\"text\"\n                value={username}\n                onChange={(e) => setUsername(e.target.value)}\n                placeholder=\"아이디를 입력하세요\"\n                required\n                className=\"w-full\"\n                data-testid=\"input-username\"\n              />\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"password\" className=\"text-sm font-medium text-gray-700\">\n                비밀번호\n              </Label>\n              <div className=\"relative\">\n                <Input\n                  id=\"password\"\n                  type={showPassword ? \"text\" : \"password\"}\n                  value={password}\n                  onChange={(e) => setPassword(e.target.value)}\n                  placeholder=\"비밀번호를 입력하세요 (8자 이상)\"\n                  required\n                  className=\"w-full pr-10\"\n                  data-testid=\"input-password\"\n                />\n                <button\n                  type=\"button\"\n                  onClick={() => setShowPassword(!showPassword)}\n                  className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600\"\n                  data-testid=\"button-toggle-password\"\n                >\n                  {showPassword ? (\n                    <EyeOff className=\"h-4 w-4\" />\n                  ) : (\n                    <Eye className=\"h-4 w-4\" />\n                  )}\n                </button>\n              </div>\n              {password && (\n                <div className=\"flex items-center text-sm mt-1\">\n                  {isPasswordValid ? (\n                    <Check className=\"h-4 w-4 text-green-500 mr-1\" />\n                  ) : (\n                    <X className=\"h-4 w-4 text-red-500 mr-1\" />\n                  )}\n                  <span className={isPasswordValid ? \"text-green-500\" : \"text-red-500\"}>\n                    8자 이상\n                  </span>\n                </div>\n              )}\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"confirmPassword\" className=\"text-sm font-medium text-gray-700\">\n                비밀번호 확인\n              </Label>\n              <div className=\"relative\">\n                <Input\n                  id=\"confirmPassword\"\n                  type={showConfirmPassword ? \"text\" : \"password\"}\n                  value={confirmPassword}\n                  onChange={(e) => setConfirmPassword(e.target.value)}\n                  placeholder=\"비밀번호를 다시 입력하세요\"\n                  required\n                  className=\"w-full pr-10\"\n                  data-testid=\"input-confirm-password\"\n                />\n                <button\n                  type=\"button\"\n                  onClick={() => setShowConfirmPassword(!showConfirmPassword)}\n                  className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600\"\n                  data-testid=\"button-toggle-confirm-password\"\n                >\n                  {showConfirmPassword ? (\n                    <EyeOff className=\"h-4 w-4\" />\n                  ) : (\n                    <Eye className=\"h-4 w-4\" />\n                  )}\n                </button>\n              </div>\n              {confirmPassword && (\n                <div className=\"flex items-center text-sm mt-1\">\n                  {isPasswordMatch ? (\n                    <Check className=\"h-4 w-4 text-green-500 mr-1\" />\n                  ) : (\n                    <X className=\"h-4 w-4 text-red-500 mr-1\" />\n                  )}\n                  <span className={isPasswordMatch ? \"text-green-500\" : \"text-red-500\"}>\n                    비밀번호 일치\n                  </span>\n                </div>\n              )}\n            </div>\n            \n            <Button\n              type=\"submit\"\n              className=\"w-full bg-forest text-white hover:bg-forest/90 py-2\"\n              disabled={isLoading || !isPasswordValid || !isPasswordMatch}\n              data-testid=\"button-signup\"\n            >\n              {isLoading ? \"가입 중...\" : \"회원가입\"}\n            </Button>\n          </form>\n          \n          <div className=\"mt-6 text-center\">\n            <p className=\"text-sm text-gray-600\" data-testid=\"login-prompt\">\n              이미 계정이 있으신가요?\n            </p>\n            <Link href=\"/login\">\n              <Button\n                variant=\"outline\"\n                className=\"mt-2 w-full border-forest text-forest hover:bg-forest hover:text-white\"\n                data-testid=\"button-login\"\n              >\n                로그인\n              </Button>\n            </Link>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":8800},"client/src/pages/Subscription.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Link } from \"wouter\";\nimport { Leaf, Check, Star } from \"lucide-react\";\n\nconst subscriptionPlans = [\n  {\n    id: 1,\n    coins: 1,\n    title: \"1코인 플랜\",\n    price: \"4,900원\",\n    monthlyPrice: \"4,900원/월\",\n    benefits: [\n      \"소형 식물 (선인장, 다육식물) 선택 가능\",\n      \"기본 관리 가이드 제공\",\n      \"식물 맞춤 리마인더 제공\"\n    ],\n    image: \"/images/sprout.png\",\n    bgColor: \"bg-gradient-to-br from-green-50 to-green-100\",\n    borderColor: \"border-green-200\",\n    popular: false\n  },\n  {\n    id: 2,\n    coins: 2,\n    title: \"2코인 플랜\",\n    price: \"9,900원\",\n    monthlyPrice: \"9,900원/월\",\n    benefits: [\n      \"중형 식물 (몬스테라, 고무나무) 선택 가능\",\n      \"기본 관리 가이드 제공\", \n      \"식물 맞춤 리마인더 제공\"\n    ],\n    image: \"/images/flower.png\",\n    bgColor: \"bg-gradient-to-br from-green-100 to-green-200\",\n    borderColor: \"border-green-300\",\n    popular: false\n  },\n  {\n    id: 3,\n    coins: 5,\n    title: \"5코인 플랜\",\n    price: \"23,900원\",\n    monthlyPrice: \"23,900원/월\",\n    benefits: [\n      \"대형 식물 (야자수, 벤자민고무나무) 선택 가능\",\n      \"기본 관리 가이드 제공\",\n      \"식물 맞춤 리마인더 제공\"\n    ],\n    image: \"/images/tree.png\",\n    bgColor: \"bg-gradient-to-br from-green-200 to-green-300\",\n    borderColor: \"border-green-300\",\n    popular: true\n  },\n  {\n    id: 4,\n    coins: 10,\n    title: \"10코인 플랜\",\n    price: \"44,900원\",\n    monthlyPrice: \"44,900원/월\",\n    benefits: [\n      \"특별한 대형 식물 (올리브나무, 유칼립투스) 선택 가능\",\n      \"기본 관리 가이드 제공\",\n      \"식물 맞춤 리마인더 제공\"\n    ],\n    image: \"/images/forest.png\",\n    bgColor: \"bg-gradient-to-br from-green-300 to-green-400\",\n    borderColor: \"border-green-500\",\n    popular: false\n  }\n];\n\nexport default function Subscription() {\n  return (\n    <div className=\"min-h-screen bg-bg-soft\">\n      {/* Header */}\n      <header className=\"bg-white shadow-sm border-b border-gray-100\" data-testid=\"header\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center h-16\">\n            <Link href=\"/\" className=\"text-2xl font-bold text-forest hover:text-forest/90 transition-colors duration-200\" data-testid=\"logo\">\n              식구\n            </Link>\n            <nav className=\"flex items-center space-x-6\">\n              <Link href=\"/subscription\" className=\"text-forest font-medium\" data-testid=\"link-subscription\">\n                구독\n              </Link>\n              <Link href=\"/how-it-works\" className=\"text-gray-700 hover:text-forest transition-colors duration-200 font-medium\" data-testid=\"link-how-it-works\">\n                이용가이드\n              </Link>\n              <Button className=\"bg-forest text-white hover:bg-forest/90 font-medium\">\n                <Link href=\"/login\" className=\"text-white\">로그인</Link>\n              </Button>\n            </nav>\n          </div>\n        </div>\n      </header>\n\n      {/* Hero Section */}\n      <section \n        className=\"py-16 lg:py-20 bg-cover bg-center bg-no-repeat relative\"\n        style={{\n          backgroundImage: `linear-gradient(rgba(255, 255, 255, 0.3), rgba(255, 255, 255, 0.3)), url('https://images.unsplash.com/photo-1469474968028-56623f02e420e?ixlib=rb-4.0.3&auto=format&fit=crop&w=2000&h=800&sat=30')`\n        }}\n        data-testid=\"subscription-hero\"\n      >\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center relative z-10\">\n          <h1 className=\"text-4xl lg:text-5xl font-bold text-gray-900 mb-6\" data-testid=\"subscription-title\">\n          </h1>\n          <p className=\"text-xl text-gray-700 mb-12 max-w-3xl mx-auto\" data-testid=\"subscription-description\">\n            당신에게 맞는 완벽한 식물 구독 플랜을 선택하세요. \n            전문가가 엄선한 식물들과 함께 더욱 풍요로운 일상을 만들어보세요.\n          </p>\n        </div>\n      </section>\n\n      {/* Subscription Plans */}\n      <section className=\"py-16 bg-gradient-to-br from-green-50 to-emerald-50\" data-testid=\"subscription-plans\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid md:grid-cols-2 gap-8\">\n            {subscriptionPlans.map((plan) => (\n              <Card \n                key={plan.id}\n                className={`${plan.bgColor} border-2 ${plan.borderColor} hover:shadow-xl transition-all duration-300 relative overflow-hidden ${plan.popular ? 'transform scale-105' : ''}`}\n                data-testid={`subscription-card-${plan.coins}`}\n              >\n                {plan.popular && (\n                  <div className=\"absolute -top-3 right-4 bg-red-500 text-white px-4 py-2 rounded-full text-sm font-bold flex items-center\" data-testid=\"popular-badge\">\n                    <Star className=\"h-4 w-4 mr-1 fill-current\" />\n                    인기\n                  </div>\n                )}\n\n                <div className=\"grid md:grid-cols-2 gap-0 h-[400px]\">\n                  {/* Image Section */}\n                  <div className=\"relative h-48 md:h-full\">\n                    <img \n                      src={plan.image}\n                      alt={plan.title}\n                      className=\"w-full h-full object-cover\"\n                      data-testid={`subscription-image-${plan.coins}`}\n                    />\n                    <div className=\"absolute top-4 right-4 bg-white rounded-full px-3 py-2 shadow-md flex items-center space-x-1\">\n                      <Leaf className=\"h-5 w-5 text-green-500\" />\n                      <span className=\"text-lg font-bold text-gray-900\" data-testid={`subscription-coins-${plan.coins}`}>\n                        {plan.coins}\n                      </span>\n                    </div>\n                  </div>\n\n                  {/* Content Section */}\n                  <CardContent className=\"p-6 flex flex-col justify-between h-full min-h-[320px]\">\n                    <div>\n                      <h3 className=\"text-2xl font-bold text-gray-900 mb-2\" data-testid={`subscription-plan-title-${plan.coins}`}>\n                        {plan.title}\n                      </h3>\n\n                      <div className=\"mb-6\">\n                        <span className=\"text-3xl font-bold text-forest\" data-testid={`subscription-price-${plan.coins}`}>\n                          {plan.monthlyPrice}\n                        </span>\n                      </div>\n\n                      <div className=\"space-y-3 mb-8\">\n                        {plan.benefits.map((benefit, index) => (\n                          <div key={index} className=\"flex items-start space-x-2\">\n                            <Check className=\"h-5 w-5 text-green-600 mt-0.5 flex-shrink-0\" />\n                            <span className=\"text-gray-700 text-sm\" data-testid={`benefit-${plan.coins}-${index}`}>\n                              {benefit}\n                            </span>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n\n                    <Link href={`/payment?plan=${plan.coins}`} className=\"block\">\n                      <Button \n                        className=\"w-full bg-forest text-white hover:bg-forest/90 py-3 font-medium text-lg\"\n                        data-testid={`subscription-select-${plan.coins}`}\n                      >\n                        선택하기\n                      </Button>\n                    </Link>\n                  </CardContent>\n                </div>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Features Section */}\n      <section className=\"py-16 bg-white\" data-testid=\"subscription-features\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <h2 className=\"text-3xl font-bold text-gray-900 text-center mb-12\" data-testid=\"features-title\">\n            모든 플랜에 포함된 혜택\n          </h2>\n\n          <div className=\"grid md:grid-cols-3 gap-8\">\n            <div className=\"text-center\">\n              <div className=\"w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <Leaf className=\"h-8 w-8 text-green-600\" />\n              </div>\n              <h3 className=\"text-xl font-semibold text-gray-900 mb-2\">전문가 선별</h3>\n              <p className=\"text-gray-600\">식물 전문가가 직접 선별한 건강한 식물들을 제공합니다.</p>\n            </div>\n\n            <div className=\"text-center\">\n              <div className=\"w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <Check className=\"h-8 w-8 text-green-600\" />\n              </div>\n              <h3 className=\"text-xl font-semibold text-gray-900 mb-2\">품질 보장</h3>\n              <p className=\"text-gray-600\">30일 품질 보장과 무료 교체 서비스를 제공합니다.</p>\n            </div>\n\n            <div className=\"text-center\">\n              <div className=\"w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <Star className=\"h-8 w-8 text-green-600\" />\n              </div>\n              <h3 className=\"text-xl font-semibold text-gray-900 mb-2\">관리 지원</h3>\n              <p className=\"text-gray-600\">식물 관리에 대한 지속적인 상담과 가이드를 제공합니다.</p>\n            </div>\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n}","size_bytes":9723},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/pages/HowItWorks.tsx":{"content":"import Header from \"@/components/Header\";\nimport Footer from \"@/components/Footer\";\nimport { ChevronDown, MapPin, CreditCard, RefreshCw } from \"lucide-react\";\nimport { useState, useEffect } from \"react\";\nimport { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\"; // Assuming Button is imported from ui/button\n\nexport default function HowItWorks() {\n  const [openSection, setOpenSection] = useState<string | null>(null);\n  const [typedText, setTypedText] = useState('');\n  const [showCursor, setShowCursor] = useState(true);\n\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, []);\n\n  useEffect(() => {\n    const text = '식구';\n    const typingSteps = ['ㅅ', '시', '식', '식ㄱ', '식구'];\n    let currentStep = 0;\n\n    const typeWriter = () => {\n      if (currentStep < typingSteps.length) {\n        setTypedText(typingSteps[currentStep]);\n        currentStep++;\n        setTimeout(typeWriter, 200);\n      } else {\n        // 타이핑 완료 후 커서 깜박임 시작\n        const cursorInterval = setInterval(() => {\n          setShowCursor(prev => !prev);\n        }, 500);\n        \n        return () => clearInterval(cursorInterval);\n      }\n    };\n\n    const timer = setTimeout(typeWriter, 300);\n    return () => clearTimeout(timer);\n  }, []);\n\n  const toggleSection = (section: string) => {\n    setOpenSection(openSection === section ? null : section);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-bg-soft\">\n      <Header />\n\n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-16\">\n        {/* Hero Section */}\n        <div className=\"text-center mb-16\">\n          <div className=\"mb-6\">\n            <span className=\"text-4xl font-bold text-forest\">\n              {typedText}\n              <span className={`${showCursor ? 'opacity-100' : 'opacity-0'} transition-opacity duration-100`}>|</span>\n            </span>\n          </div>\n          <h1 className=\"text-2xl md:text-3xl font-bold text-gray-900 mb-4\">\n            당신의 공간을 더욱 특별하게 만들어줄 \n            <br />\n            프리미엄 식물 구독 서비스입니다.\n          </h1>\n          <p className=\"text-lg text-gray-600 max-w-2xl mx-auto\">\n            식물부터 화분까지, 자유롭게 구독하고 언제든 원할 때 해지하세요.\n          </p>\n        </div>\n\n        {/* FAQ Sections */}\n        <div className=\"space-y-4\">\n          {/* Service Area */}\n          <div className=\"bg-white rounded-lg shadow-sm border border-gray-200\">\n            <button\n              onClick={() => toggleSection(\"service-area\")}\n              className=\"w-full px-6 py-6 flex items-center justify-between text-left\"\n            >\n              <div className=\"flex items-center\">\n                <MapPin className=\"h-6 w-6 text-forest mr-3\" />\n                <span className=\"text-lg font-semibold text-gray-900\">\n                  서비스 가능 지역이 궁금해요\n                </span>\n              </div>\n              <ChevronDown\n                className={`h-5 w-5 text-gray-500 transition-transform ${\n                  openSection === \"service-area\" ? \"rotate-180\" : \"\"\n                }`}\n              />\n            </button>\n            {openSection === \"service-area\" && (\n              <div className=\"px-6 pb-6\">\n                <p className=\"text-gray-700 leading-relaxed\">\n                  서울, 경기, 인천(일부 제외지역)에서 서비스가 가능합니다.\n                  <br />\n                  점차 전국으로 확대해 나갈 예정입니다.\n                </p>\n              </div>\n            )}\n          </div>\n\n          {/* Pricing */}\n          <div className=\"bg-white rounded-lg shadow-sm border border-gray-200\">\n            <button\n              onClick={() => toggleSection(\"pricing\")}\n              className=\"w-full px-6 py-6 flex items-center justify-between text-left\"\n            >\n              <div className=\"flex items-center\">\n                <CreditCard className=\"h-6 w-6 text-forest mr-3\" />\n                <span className=\"text-lg font-semibold text-gray-900\">\n                  요금제가 궁금해요\n                </span>\n              </div>\n              <ChevronDown\n                className={`h-5 w-5 text-gray-500 transition-transform ${\n                  openSection === \"pricing\" ? \"rotate-180\" : \"\"\n                }`}\n              />\n            </button>\n            {openSection === \"pricing\" && (\n              <div className=\"px-6 pb-6\">\n                <div className=\"space-y-3\">\n                  <div className=\"flex justify-between items-center py-2 border-b border-gray-100\">\n                    <span className=\"font-medium text-gray-900\">1코인</span>\n                    <span className=\"text-forest font-semibold\">4,900원</span>\n                  </div>\n                  <div className=\"flex justify-between items-center py-2 border-b border-gray-100\">\n                    <span className=\"font-medium text-gray-900\">2코인</span>\n                    <span className=\"text-forest font-semibold\">9,900원</span>\n                  </div>\n                  <div className=\"flex justify-between items-center py-2 border-b border-gray-100\">\n                    <span className=\"font-medium text-gray-900\">5코인</span>\n                    <span className=\"text-forest font-semibold\">23,900원</span>\n                  </div>\n                  <div className=\"flex justify-between items-center py-2\">\n                    <span className=\"font-medium text-gray-900\">10코인</span>\n                    <span className=\"text-forest font-semibold\">44,900원</span>\n                  </div>\n                </div>\n                <p className=\"text-sm text-gray-600 mt-4\">\n                  원하는 요금제를 선택할 수 있어요.\n                </p>\n              </div>\n            )}\n          </div>\n\n          {/* Circular Service */}\n          <div className=\"bg-white rounded-lg shadow-sm border border-gray-200\">\n            <button\n              onClick={() => toggleSection(\"circular\")}\n              className=\"w-full px-6 py-6 flex items-center justify-between text-left\"\n            >\n              <div className=\"flex items-center\">\n                <RefreshCw className=\"h-6 w-6 text-forest mr-3\" />\n                <span className=\"text-lg font-semibold text-gray-900\">\n                  모두 새 상품인가요?\n                </span>\n              </div>\n              <ChevronDown\n                className={`h-5 w-5 text-gray-500 transition-transform ${\n                  openSection === \"circular\" ? \"rotate-180\" : \"\"\n                }`}\n              />\n            </button>\n            {openSection === \"circular\" && (\n              <div className=\"px-6 pb-6\">\n                <p className=\"text-gray-700 leading-relaxed\">\n                  식구는 순환식물구독(Circular Plant)으로, 구독으로 식물을\n                  경험하고 반납하면 다음 사람에게 이어져 가치를 나누는\n                  <br />\n                  <strong>서비스형 식물(Plant-as-a-Service)</strong>로 운영돼요.\n                </p>\n              </div>\n            )}\n          </div>\n        </div>\n\n        {/* Call to Action */}\n        <div className=\"text-center mt-16\">\n          <div className=\"bg-forest/5 rounded-2xl p-8\">\n            <h3 className=\"text-2xl font-bold text-gray-900 mb-4\">\n              지금 바로 시작해보세요!\n            </h3>\n            <p className=\"text-gray-600 mb-6\">\n              당신만의 식물 구독 여정을 시작하고 더 나은 일상을 만들어보세요.\n            </p>\n            <Link href=\"/subscription\">\n              <Button\n                size=\"lg\"\n                className=\"bg-forest text-white hover:bg-forest/90 px-8 py-3\"\n              >\n                구독 시작하기\n              </Button>\n            </Link>\n          </div>\n        </div>\n      </div>\n\n      <Footer />\n    </div>\n  );\n}","size_bytes":7992},"client/src/pages/Payment.tsx":{"content":"import { useLocation } from \"wouter\";\nimport { useEffect, useState } from \"react\";\nimport Header from \"@/components/Header\";\nimport Footer from \"@/components/Footer\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { CreditCard, ArrowLeft } from \"lucide-react\";\nimport { Link } from \"wouter\";\n\nconst planDetails = {\n  1: { title: \"1코인\", price: \"4,900원\", value: 4900 },\n  2: { title: \"2코인\", price: \"9,900원\", value: 9900 },\n  5: { title: \"5코인\", price: \"23,900원\", value: 23900 },\n  10: { title: \"10코인\", price: \"44,900원\", value: 44900 }\n};\n\nexport default function Payment() {\n  const [location] = useLocation();\n  const [selectedPlan, setSelectedPlan] = useState<keyof typeof planDetails | null>(null);\n  const [showPaymentForm, setShowPaymentForm] = useState(false);\n\n  useEffect(() => {\n    const params = new URLSearchParams(window.location.search);\n    const plan = params.get('plan');\n    if (plan) {\n      const planNumber = Number(plan);\n      if (planNumber in planDetails) {\n        setSelectedPlan(planNumber as keyof typeof planDetails);\n      }\n    }\n  }, [location]);\n\n  const handlePaymentClick = () => {\n    setShowPaymentForm(true);\n  };\n\n  const handlePaymentSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    // 실제 결제 처리는 하지 않고 성공 메시지만 표시\n    alert(\"결제가 완료되었습니다! (데모용)\");\n  };\n\n  if (!selectedPlan) {\n    return (\n      <div className=\"min-h-screen bg-bg-soft\">\n        <Header />\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-16\">\n          <div className=\"text-center\">\n            <h1 className=\"text-2xl font-bold text-gray-900 mb-4\">잘못된 플랜 정보입니다</h1>\n            <Link href=\"/subscription\">\n              <Button className=\"bg-forest text-white hover:bg-forest/90\">\n                구독 페이지로 돌아가기\n              </Button>\n            </Link>\n          </div>\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n\n  const plan = planDetails[selectedPlan];\n\n  return (\n    <div className=\"min-h-screen bg-bg-soft\">\n      <Header />\n      \n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-16\">\n        <div className=\"mb-8\">\n          <Link href=\"/subscription\" className=\"inline-flex items-center text-forest hover:text-forest/80\">\n            <ArrowLeft className=\"h-4 w-4 mr-2\" />\n            구독 페이지로 돌아가기\n          </Link>\n        </div>\n\n        <div className=\"grid md:grid-cols-2 gap-8\">\n          {/* 주문 요약 */}\n          <div>\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center justify-between\">\n                  주문 요약\n                  <span className=\"bg-forest/10 text-forest px-2 py-1 rounded text-sm font-medium\">\n                    선택됨\n                  </span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"flex justify-between items-center py-4 border-b\">\n                  <div>\n                    <h3 className=\"font-semibold text-lg\">{plan.title} 플랜</h3>\n                    <p className=\"text-sm text-gray-600\">식물 구독 서비스</p>\n                  </div>\n                  <div className=\"text-right\">\n                    <p className=\"text-xl font-bold text-forest\">{plan.price}</p>\n                  </div>\n                </div>\n                \n                <div className=\"space-y-2 text-sm\">\n                  <div className=\"flex justify-between\">\n                    <span>상품 금액</span>\n                    <span>{plan.price}</span>\n                  </div>\n                  <div className=\"flex justify-between font-semibold text-lg border-t pt-2\">\n                    <span>총 결제 금액</span>\n                    <span className=\"text-forest\">{plan.price}</span>\n                  </div>\n                </div>\n\n                <div className=\"bg-forest/5 p-4 rounded-lg\">\n                  <h4 className=\"font-semibold mb-2\">포함된 혜택</h4>\n                  <ul className=\"text-sm text-gray-600 space-y-1\">\n                    <li>• 전문가 선별 식물</li>\n                    <li>• 30일 품질 보장</li>\n                    <li>• 무료 교체 서비스</li>\n                    <li>• 관리 상담 지원</li>\n                  </ul>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* 결제 정보 */}\n          <div>\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <CreditCard className=\"h-5 w-5 mr-2\" />\n                  결제 정보\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {!showPaymentForm ? (\n                  <div className=\"space-y-4\">\n                    <div className=\"text-center py-16\">\n                      <div className=\"w-20 h-20 bg-forest/10 rounded-full flex items-center justify-center mx-auto mb-8\">\n                        <CreditCard className=\"h-10 w-10 text-forest\" />\n                      </div>\n                      <Button \n                        onClick={handlePaymentClick}\n                        className=\"w-full bg-forest text-white hover:bg-forest/90 py-4 text-xl font-semibold\"\n                        data-testid=\"button-proceed-payment\"\n                      >\n                        결제하기\n                      </Button>\n                    </div>\n                  </div>\n                ) : (\n                  <form onSubmit={handlePaymentSubmit} className=\"space-y-4\">\n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                        카드 번호\n                      </label>\n                      <input \n                        type=\"text\" \n                        placeholder=\"1234 5678 9012 3456\"\n                        className=\"w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-forest focus:border-transparent\"\n                        data-testid=\"input-card-number\"\n                      />\n                    </div>\n                    \n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div>\n                        <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                          유효기간\n                        </label>\n                        <input \n                          type=\"text\" \n                          placeholder=\"MM/YY\"\n                          className=\"w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-forest focus:border-transparent\"\n                          data-testid=\"input-expiry\"\n                        />\n                      </div>\n                      <div>\n                        <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                          CVC\n                        </label>\n                        <input \n                          type=\"text\" \n                          placeholder=\"123\"\n                          className=\"w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-forest focus:border-transparent\"\n                          data-testid=\"input-cvc\"\n                        />\n                      </div>\n                    </div>\n                    \n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                        카드 소유자명\n                      </label>\n                      <input \n                        type=\"text\" \n                        placeholder=\"홍길동\"\n                        className=\"w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-forest focus:border-transparent\"\n                        data-testid=\"input-cardholder-name\"\n                      />\n                    </div>\n                    \n                    <Button \n                      type=\"submit\"\n                      className=\"w-full bg-forest text-white hover:bg-forest/90 py-3 text-lg mt-6\"\n                      data-testid=\"button-complete-payment\"\n                    >\n                      {plan.price} 결제 완료\n                    </Button>\n                    \n                    <Button \n                      type=\"button\"\n                      variant=\"outline\"\n                      onClick={() => setShowPaymentForm(false)}\n                      className=\"w-full\"\n                      data-testid=\"button-back-to-payment-options\"\n                    >\n                      이전으로\n                    </Button>\n                  </form>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n      \n      <Footer />\n    </div>\n  );\n}","size_bytes":9012},"client/src/pages/PlantRecommendation.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport Header from \"@/components/Header\";\nimport Footer from \"@/components/Footer\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Leaf, Sun, Droplets, Settings } from \"lucide-react\";\nimport { Link } from \"wouter\";\n\nconst plants = [\n  // 소형 식물\n  {\n    id: 1,\n    name: \"틸란드시아\",\n    coins: 1,\n    size: \"소형\",\n    lightCondition: \"반음지\",\n    difficulty: \"쉬움\",\n    humidity: \"건조\",\n    lightCategory: \"햇빛이 잘 들지 않아요\",\n    image: \"\",\n    alt: \"틸란드시아\"\n  },\n  {\n    id: 2,\n    name: \"미니 선인장\",\n    coins: 1,\n    size: \"소형\",\n    lightCondition: \"햇빛 직사광\",\n    difficulty: \"쉬움\",\n    humidity: \"건조\",\n    lightCategory: \"햇빛이 잘 들어요\",\n    image: \"\",\n    alt: \"미니 선인장\"\n  },\n  {\n    id: 3,\n    name: \"칼라데아 오르비폴리아\",\n    coins: 1,\n    size: \"소형\",\n    lightCondition: \"간접광\",\n    difficulty: \"어려움\",\n    humidity: \"습함\",\n    lightCategory: \"햇빛이 잘 들지 않아요\",\n    image: \"\",\n    alt: \"칼라데아 오르비폴리아\"\n  },\n  {\n    id: 4,\n    name: \"스킨답서스\",\n    coins: 1,\n    size: \"소형\",\n    lightCondition: \"반음지/음지\",\n    difficulty: \"쉬움\",\n    humidity: \"보통\",\n    lightCategory: \"햇빛이 잘 들지 않아요\",\n    image: \"\",\n    alt: \"스킨답서스\"\n  },\n  // 중형 식물\n  {\n    id: 5,\n    name: \"몬스테라\",\n    coins: 2,\n    size: \"중형\",\n    lightCondition: \"간접광\",\n    difficulty: \"보통\",\n    humidity: \"보통\",\n    lightCategory: \"햇빛이 잘 들지 않아요\",\n    image: \"\",\n    alt: \"몬스테라\"\n  },\n  {\n    id: 6,\n    name: \"여인초\",\n    coins: 2,\n    size: \"중형\",\n    lightCondition: \"햇빛 직사광\",\n    difficulty: \"보통\",\n    humidity: \"보통\",\n    lightCategory: \"햇빛이 잘 들어요\",\n    image: \"\",\n    alt: \"여인초\"\n  },\n  {\n    id: 7,\n    name: \"스파티필룸\",\n    coins: 2,\n    size: \"중형\",\n    lightCondition: \"반음지/음지\",\n    difficulty: \"쉬움\",\n    humidity: \"습함\",\n    lightCategory: \"햇빛이 잘 들지 않아요\",\n    image: \"\",\n    alt: \"스파티필룸\"\n  },\n  {\n    id: 8,\n    name: \"아레카야자\",\n    coins: 2,\n    size: \"중형\",\n    lightCondition: \"반음지\",\n    difficulty: \"보통\",\n    humidity: \"보통\",\n    lightCategory: \"햇빛이 잘 들지 않아요\",\n    image: \"\",\n    alt: \"아레카야자\"\n  },\n  // 대형 식물\n  {\n    id: 9,\n    name: \"고무나무\",\n    coins: 3,\n    size: \"대형\",\n    lightCondition: \"간접광\",\n    difficulty: \"쉬움\",\n    humidity: \"건조\",\n    lightCategory: \"햇빛이 잘 들지 않아요\",\n    image: \"\",\n    alt: \"고무나무\"\n  },\n  {\n    id: 10,\n    name: \"극락조\",\n    coins: 3,\n    size: \"대형\",\n    lightCondition: \"햇빛 직사광\",\n    difficulty: \"보통\",\n    humidity: \"보통\",\n    lightCategory: \"햇빛이 잘 들어요\",\n    image: \"\",\n    alt: \"극락조\"\n  },\n  {\n    id: 11,\n    name: \"유포르비아 트리코나\",\n    coins: 3,\n    size: \"대형\",\n    lightCondition: \"햇빛 직사광\",\n    difficulty: \"쉬움\",\n    humidity: \"건조\",\n    lightCategory: \"햇빛이 잘 들어요\",\n    image: \"\",\n    alt: \"유포르비아 트리코나\"\n  },\n  {\n    id: 12,\n    name: \"필로덴드론 콩고\",\n    coins: 3,\n    size: \"대형\",\n    lightCondition: \"반음지\",\n    difficulty: \"쉬움\",\n    humidity: \"보통\",\n    lightCategory: \"햇빛이 잘 들지 않아요\",\n    image: \"\",\n    alt: \"필로덴드론 콩고\"\n  }\n];\n\nconst sizeOptions = [\n  { value: \"소형\", label: \"소형 식물\", icon: Leaf },\n  { value: \"중형\", label: \"중형 식물\", icon: Leaf },\n  { value: \"대형\", label: \"대형 식물\", icon: Leaf }\n];\n\nconst lightOptions = [\n  { value: \"햇빛이 잘 들어요\", label: \"햇빛이 잘 들어요\", icon: Sun },\n  { value: \"햇빛이 잘 들지 않아요\", label: \"햇빛이 잘 들지 않아요\", icon: Sun }\n];\n\nconst humidityOptions = [\n  { value: \"건조\", label: \"건조해요\", icon: Droplets },\n  { value: \"보통\", label: \"보통이에요\", icon: Droplets },\n  { value: \"습함\", label: \"습해요\", icon: Droplets }\n];\n\nconst difficultyOptions = [\n  { value: \"쉬움\", label: \"쉬워요\", icon: Settings },\n  { value: \"보통\", label: \"보통이에요\", icon: Settings },\n  { value: \"어려움\", label: \"어려워요\", icon: Settings }\n];\n\nexport default function PlantRecommendation() {\n  const [selectedSize, setSelectedSize] = useState<string | null>(null);\n  const [selectedLight, setSelectedLight] = useState<string | null>(null);\n  const [selectedHumidity, setSelectedHumidity] = useState<string | null>(null);\n  const [selectedDifficulty, setSelectedDifficulty] = useState<string | null>(null);\n  const [filteredPlants, setFilteredPlants] = useState(plants);\n  const [typedText, setTypedText] = useState('');\n  const [showCursor, setShowCursor] = useState(true);\n\n  // 타이핑 효과\n  useEffect(() => {\n    const text = '나에게 맞는 식물 찾기';\n    const typingSteps = ['ㄴ', '나', '나ㅇ', '나에', '나에ㄱ', '나에게', '나에게 ', '나에게 ㅁ', '나에게 마', '나에게 맞', '나에게 맞ㄴ', '나에게 맞는', '나에게 맞는 ', '나에게 맞는 ㅅ', '나에게 맞는 시', '나에게 맞는 식', '나에게 맞는 식ㅁ', '나에게 맞는 식물', '나에게 맞는 식물 ', '나에게 맞는 식물 ㅊ', '나에게 맞는 식물 차', '나에게 맞는 식물 찾', '나에게 맞는 식물 찾ㄱ', '나에게 맞는 식물 찾기'];\n    let currentStep = 0;\n\n    const typeWriter = () => {\n      if (currentStep < typingSteps.length) {\n        setTypedText(typingSteps[currentStep]);\n        currentStep++;\n        setTimeout(typeWriter, 150);\n      } else {\n        // 타이핑 완료 후 커서 깜박임 시작\n        const cursorInterval = setInterval(() => {\n          setShowCursor(prev => !prev);\n        }, 500);\n        \n        return () => clearInterval(cursorInterval);\n      }\n    };\n\n    const timer = setTimeout(typeWriter, 300);\n    return () => clearTimeout(timer);\n  }, []);\n\n  // 필터링 로직\n  useEffect(() => {\n    let filtered = plants;\n\n    if (selectedSize) {\n      filtered = filtered.filter(plant => plant.size === selectedSize);\n    }\n\n    if (selectedLight) {\n      filtered = filtered.filter(plant => plant.lightCategory === selectedLight);\n    }\n\n    if (selectedHumidity) {\n      filtered = filtered.filter(plant => plant.humidity === selectedHumidity);\n    }\n\n    if (selectedDifficulty) {\n      filtered = filtered.filter(plant => plant.difficulty === selectedDifficulty);\n    }\n\n    setFilteredPlants(filtered);\n  }, [selectedSize, selectedLight, selectedHumidity, selectedDifficulty]);\n\n  // 태그 생성 함수\n  const getPlantTags = (plant: any) => {\n    return [\n      `#${plant.lightCondition}`,\n      `#${plant.humidity}`,\n      `#${plant.difficulty}`\n    ];\n  };\n\n  const clearAllFilters = () => {\n    setSelectedSize(null);\n    setSelectedLight(null);\n    setSelectedHumidity(null);\n    setSelectedDifficulty(null);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-bg-soft\">\n      <Header />\n      \n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-16\">\n        {/* 헤더 섹션 */}\n        <div className=\"text-center mb-12\">\n          <h1 className=\"text-4xl font-bold text-forest mb-4\" data-testid=\"recommendation-title\">\n            {typedText}\n            <span className={`${showCursor ? 'opacity-100' : 'opacity-0'} transition-opacity duration-100`}>|</span>\n          </h1>\n          <p className=\"text-lg text-gray-600 max-w-4xl mx-auto\">\n            나의 환경에 적합한 완벽한 식물을 찾아보세요! 필터를 선택하여 맞춤형 추천을 받을 수 있습니다.\n          </p>\n        </div>\n\n        {/* 필터 섹션 */}\n        <div className=\"space-y-8 mb-12\">\n          {/* 크기 필터 */}\n          <div>\n            <h3 className=\"text-xl font-semibold text-gray-900 mb-4 flex items-center\">\n              <Leaf className=\"h-5 w-5 mr-2 text-green-500\" />\n              식물 크기\n            </h3>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              {sizeOptions.map((option) => {\n                const IconComponent = option.icon;\n                return (\n                  <Button\n                    key={option.value}\n                    onClick={() => setSelectedSize(selectedSize === option.value ? null : option.value)}\n                    variant={selectedSize === option.value ? \"default\" : \"outline\"}\n                    className={`h-auto p-4 text-left justify-start ${\n                      selectedSize === option.value \n                        ? \"bg-forest text-white hover:bg-forest/90\" \n                        : \"hover:bg-gray-50\"\n                    }`}\n                    data-testid={`filter-size-${option.value}`}\n                  >\n                    <IconComponent className=\"h-5 w-5 mr-3\" />\n                    <span className=\"text-base\">{option.label}</span>\n                  </Button>\n                );\n              })}\n            </div>\n          </div>\n          {/* 빛 조건 필터 */}\n          <div>\n            <h3 className=\"text-xl font-semibold text-gray-900 mb-4 flex items-center\">\n              <Sun className=\"h-5 w-5 mr-2 text-yellow-500\" />\n              빛\n            </h3>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              {lightOptions.map((option) => {\n                const IconComponent = option.icon;\n                return (\n                  <Button\n                    key={option.value}\n                    onClick={() => setSelectedLight(selectedLight === option.value ? null : option.value)}\n                    variant={selectedLight === option.value ? \"default\" : \"outline\"}\n                    className={`h-auto p-4 text-left justify-start ${\n                      selectedLight === option.value \n                        ? \"bg-forest text-white hover:bg-forest/90\" \n                        : \"hover:bg-gray-50\"\n                    }`}\n                    data-testid={`filter-light-${option.value}`}\n                  >\n                    <IconComponent className=\"h-5 w-5 mr-3\" />\n                    <span className=\"text-base\">{option.label}</span>\n                  </Button>\n                );\n              })}\n            </div>\n          </div>\n\n          {/* 습도 조건 필터 */}\n          <div>\n            <h3 className=\"text-xl font-semibold text-gray-900 mb-4 flex items-center\">\n              <Droplets className=\"h-5 w-5 mr-2 text-blue-500\" />\n              습도\n            </h3>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              {humidityOptions.map((option) => {\n                const IconComponent = option.icon;\n                return (\n                  <Button\n                    key={option.value}\n                    onClick={() => setSelectedHumidity(selectedHumidity === option.value ? null : option.value)}\n                    variant={selectedHumidity === option.value ? \"default\" : \"outline\"}\n                    className={`h-auto p-4 text-left justify-start ${\n                      selectedHumidity === option.value \n                        ? \"bg-forest text-white hover:bg-forest/90\" \n                        : \"hover:bg-gray-50\"\n                    }`}\n                    data-testid={`filter-humidity-${option.value}`}\n                  >\n                    <IconComponent className=\"h-5 w-5 mr-3\" />\n                    <span className=\"text-base\">{option.label}</span>\n                  </Button>\n                );\n              })}\n            </div>\n          </div>\n\n          {/* 관리 난이도 필터 */}\n          <div>\n            <h3 className=\"text-xl font-semibold text-gray-900 mb-4 flex items-center\">\n              <Settings className=\"h-5 w-5 mr-2 text-gray-600\" />\n              관리 난이도\n            </h3>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              {difficultyOptions.map((option) => {\n                const IconComponent = option.icon;\n                return (\n                  <Button\n                    key={option.value}\n                    onClick={() => setSelectedDifficulty(selectedDifficulty === option.value ? null : option.value)}\n                    variant={selectedDifficulty === option.value ? \"default\" : \"outline\"}\n                    className={`h-auto p-4 text-left justify-start ${\n                      selectedDifficulty === option.value \n                        ? \"bg-forest text-white hover:bg-forest/90\" \n                        : \"hover:bg-gray-50\"\n                    }`}\n                    data-testid={`filter-difficulty-${option.value}`}\n                  >\n                    <IconComponent className=\"h-5 w-5 mr-3\" />\n                    <span className=\"text-base\">{option.label}</span>\n                  </Button>\n                );\n              })}\n            </div>\n          </div>\n\n          {/* 필터 초기화 버튼 */}\n          {(selectedSize || selectedLight || selectedHumidity || selectedDifficulty) && (\n            <div className=\"text-center\">\n              <Button \n                onClick={clearAllFilters}\n                variant=\"outline\"\n                className=\"px-6 py-2\"\n                data-testid=\"clear-filters-button\"\n              >\n                모든 필터 초기화\n              </Button>\n            </div>\n          )}\n        </div>\n\n        {/* 추천 식물 결과 */}\n        <div className=\"mb-8\">\n          <h3 className=\"text-2xl font-semibold text-gray-900 mb-6\" data-testid=\"results-title\">\n            추천 식물 ({filteredPlants.length}개)\n          </h3>\n          \n          {filteredPlants.length === 0 ? (\n            <div className=\"text-center py-12\">\n              <p className=\"text-lg text-gray-500\" data-testid=\"no-results-message\">\n                선택한 조건에 맞는 식물이 없습니다. 다른 조건으로 시도해보세요.\n              </p>\n            </div>\n          ) : (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n              {filteredPlants.map((plant) => (\n                <Link key={plant.id} href={`/plant/${plant.id}`}>\n                  <Card \n                    className=\"bg-white rounded-2xl shadow-md hover:shadow-lg transition-shadow duration-300 overflow-hidden cursor-pointer\"\n                    data-testid={`card-plant-${plant.id}`}\n                  >\n                    <div className=\"relative\">\n                      <img \n                        src={plant.image}\n                        alt={plant.alt}\n                        className=\"w-full h-48 object-cover\"\n                        data-testid={`img-plant-${plant.id}`}\n                      />\n                      <div className=\"absolute top-3 right-3 bg-white rounded-full px-3 py-1 shadow-md flex items-center space-x-1\">\n                        <Leaf className=\"h-4 w-4 text-green-500\" />\n                        <span className=\"text-sm font-bold text-gray-900\" data-testid={`text-plant-coins-${plant.id}`}>\n                          {plant.coins}\n                        </span>\n                      </div>\n                      {/* 식물 태그 */}\n                      <div className=\"absolute bottom-0 left-0 right-0 bg-gradient-to-t from-black/70 to-transparent p-3\">\n                        <div className=\"flex flex-wrap gap-1\">\n                          {getPlantTags(plant).map((tag, index) => (\n                            <span\n                              key={index}\n                              className=\"bg-white/90 text-gray-800 px-2 py-1 rounded-full text-xs font-medium\"\n                              data-testid={`tag-${plant.id}-${index}`}\n                            >\n                              {tag}\n                            </span>\n                          ))}\n                        </div>\n                      </div>\n                    </div>\n                    <CardContent className=\"p-4\">\n                      <h4 className=\"font-semibold text-gray-900 mb-1\" data-testid={`text-plant-name-${plant.id}`}>\n                        {plant.name}\n                      </h4>\n                      <p className=\"text-sm text-gray-500\" data-testid={`text-plant-size-${plant.id}`}>\n                        {plant.size} 식물\n                      </p>\n                    </CardContent>\n                  </Card>\n                </Link>\n              ))}\n            </div>\n          )}\n        </div>\n      </div>\n      \n      <Footer />\n    </div>\n  );\n}","size_bytes":16703},"client/src/pages/PlantTips.tsx":{"content":"import { useState } from \"react\";\nimport Header from \"@/components/Header\";\nimport Footer from \"@/components/Footer\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Search, Leaf } from \"lucide-react\";\n\nconst plantTips = [\n  {\n    id: 1,\n    name: \"틸란드시아\",\n    title: \"틸란드시아 관리법\",\n    summary: \"공중식물 틸란드시아의 특별한 관리 방법\",\n    image: \"https://images.unsplash.com/photo-1506905925346-21bda4d32df4?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300\",\n    content: `\n      <h3>✨ 틸란드시아란?</h3>\n      <p>틸란드시아는 흙 없이도 자랄 수 있는 독특한 공중식물입니다. 공기 중의 수분과 영양분을 흡수하여 생존합니다.</p>\n      \n      <h3>💧 물주기</h3>\n      <p>• 주 2-3회 분무기로 살짝 뿌려주세요</p>\n      <p>• 아침 시간대에 물을 주는 것이 좋습니다</p>\n      <p>• 물을 너무 많이 주면 뿌리가 썩을 수 있으니 주의하세요</p>\n      \n      <h3>☀️ 빛 조건</h3>\n      <p>• 밝은 간접광을 선호합니다</p>\n      <p>• 직사광선은 피해주세요</p>\n      <p>• 통풍이 잘 되는 곳에 두세요</p>\n      \n      <h3>🌡️ 온도와 습도</h3>\n      <p>• 18-24°C 정도의 온도가 적당합니다</p>\n      <p>• 습도는 40-60% 정도로 유지해주세요</p>\n      <p>• 에어컨이나 난방기 바람은 피해주세요</p>\n    `\n  },\n  {\n    id: 2,\n    name: \"미니 선인장\",\n    title: \"미니 선인장 키우기\",\n    summary: \"작지만 강한 미니 선인장 관리 비법\",\n    image: \"https://images.unsplash.com/photo-1459411552884-841db9b3cc2a?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300\",\n    content: `\n      <h3>🌵 미니 선인장 특징</h3>\n      <p>미니 선인장은 물을 적게 주고 햇빛을 좋아하는 관리하기 쉬운 식물입니다.</p>\n      \n      <h3>💧 물주기</h3>\n      <p>• 흙이 완전히 마른 후 물을 주세요 (2-3주에 한 번)</p>\n      <p>• 겨울에는 한 달에 한 번 정도로 줄여주세요</p>\n      <p>• 화분 밑으로 물이 빠질 때까지 충분히 주세요</p>\n      \n      <h3>☀️ 빛 조건</h3>\n      <p>• 하루 최소 6시간 이상의 직사광선이 필요합니다</p>\n      <p>• 남향 창가가 가장 좋습니다</p>\n      <p>• 빛이 부족하면 웃자라게 됩니다</p>\n      \n      <h3>🌡️ 온도 관리</h3>\n      <p>• 15-30°C 사이의 온도를 선호합니다</p>\n      <p>• 겨울에는 10°C 이상 유지해주세요</p>\n      <p>• 급격한 온도 변화는 피해주세요</p>\n    `\n  },\n  {\n    id: 3,\n    name: \"칼라데아 오르비폴리아\",\n    title: \"칼라데아 오르비폴리아 관리법\",\n    summary: \"아름다운 잎무늬 칼라데아의 섬세한 관리법\",\n    image: \"https://images.unsplash.com/photo-1509423350716-97f2360af3e4?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300\",\n    content: `\n      <h3>🎨 칼라데아의 매력</h3>\n      <p>칼라데아 오르비폴리아는 독특한 줄무늬 잎이 특징인 관엽식물로, 높은 습도를 좋아합니다.</p>\n      \n      <h3>💧 물주기</h3>\n      <p>• 흙 표면이 살짝 마르면 물을 주세요</p>\n      <p>• 뿌리 부분이 항상 촉촉하게 유지되도록 하세요</p>\n      <p>• 정수된 물이나 빗물을 사용하는 것이 좋습니다</p>\n      \n      <h3>☀️ 빛 조건</h3>\n      <p>• 밝은 간접광을 선호합니다</p>\n      <p>• 직사광선에 노출되면 잎이 탈 수 있습니다</p>\n      <p>• 북향이나 동향 창가가 적합합니다</p>\n      \n      <h3>💨 습도 관리</h3>\n      <p>• 습도 60% 이상을 유지해주세요</p>\n      <p>• 가습기나 물받이를 활용하세요</p>\n      <p>• 잎에 직접 분무하지 마세요 (얼룩이 생길 수 있음)</p>\n    `\n  },\n  {\n    id: 4,\n    name: \"스킨답서스\",\n    title: \"스킨답서스 키우기\",\n    summary: \"초보자도 쉽게 키울 수 있는 덩굴식물\",\n    image: \"https://images.unsplash.com/photo-1585320806297-9794b3e4eeae?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300\",\n    content: `\n      <h3>🌿 스킨답서스란?</h3>\n      <p>스킨답서스는 관리가 쉽고 공기정화 능력이 뛰어난 덩굴성 식물입니다.</p>\n      \n      <h3>💧 물주기</h3>\n      <p>• 흙 표면이 마르면 물을 주세요</p>\n      <p>• 주 1-2회 정도가 적당합니다</p>\n      <p>• 과습보다는 약간 건조하게 관리하세요</p>\n      \n      <h3>☀️ 빛 조건</h3>\n      <p>• 반음지에서도 잘 자랍니다</p>\n      <p>• 형광등 불빛만으로도 생육 가능합니다</p>\n      <p>• 너무 어두우면 잎의 무늬가 사라집니다</p>\n      \n      <h3>✂️ 가지치기와 번식</h3>\n      <p>• 너무 길어진 덩굴은 잘라주세요</p>\n      <p>• 잘라낸 가지를 물에 꽂으면 뿌리가 나옵니다</p>\n      <p>• 뿌리가 나면 흙에 심어 새로운 식물로 키울 수 있습니다</p>\n    `\n  },\n  {\n    id: 5,\n    name: \"몬스테라\",\n    title: \"몬스테라 관리 완전정복\",\n    summary: \"인스타그램 스타 몬스테라의 모든 것\",\n    image: \"https://images.unsplash.com/photo-1512428813834-c702c7702b78?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300\",\n    content: `\n      <h3>🕳️ 몬스테라의 특징</h3>\n      <p>몬스테라는 구멍이 뚫린 독특한 잎으로 유명한 열대식물입니다. 성장하면서 잎에 구멍과 갈래가 생깁니다.</p>\n      \n      <h3>💧 물주기</h3>\n      <p>• 흙 표면 2-3cm가 마르면 물을 주세요</p>\n      <p>• 겨울에는 물주기 횟수를 줄여주세요</p>\n      <p>• 화분 받침에 고인 물은 제거해주세요</p>\n      \n      <h3>☀️ 빛 조건</h3>\n      <p>• 밝은 간접광을 선호합니다</p>\n      <p>• 직사광선은 잎을 태울 수 있습니다</p>\n      <p>• 빛이 부족하면 구멍이 생기지 않을 수 있습니다</p>\n      \n      <h3>🌱 지지대 설치</h3>\n      <p>• 몬스테라는 덩굴성 식물이므로 지지대가 필요합니다</p>\n      <p>• 코코넛 섬유나 이끼봉을 사용하세요</p>\n      <p>• 기근(공중뿌리)이 나오면 지지대에 유도해주세요</p>\n    `\n  },\n  {\n    id: 6,\n    name: \"여인초\",\n    title: \"여인초 관리법\",\n    summary: \"우아한 자태의 여인초 키우기\",\n    image: \"https://images.unsplash.com/photo-1416879595882-3373a0480b5b?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300\",\n    content: `\n      <h3>🌸 여인초란?</h3>\n      <p>여인초는 우아한 잎의 형태와 섬세한 아름다움으로 사랑받는 관엽식물입니다.</p>\n      \n      <h3>💧 물주기</h3>\n      <p>• 흙이 촉촉하게 유지되도록 물을 주세요</p>\n      <p>• 주 2-3회 정도가 적당합니다</p>\n      <p>• 잎에 물이 닿지 않도록 주의하세요</p>\n      \n      <h3>☀️ 빛 조건</h3>\n      <p>• 밝은 직사광선을 좋아합니다</p>\n      <p>• 남향 창가가 가장 적합합니다</p>\n      <p>• 빛이 부족하면 잎이 처질 수 있습니다</p>\n      \n      <h3>🌡️ 온도와 환경</h3>\n      <p>• 20-25°C의 온도를 선호합니다</p>\n      <p>• 통풍이 잘 되는 곳에 두세요</p>\n      <p>• 급격한 환경 변화는 피해주세요</p>\n    `\n  },\n  {\n    id: 7,\n    name: \"스파티필룸\",\n    title: \"스파티필룸(평화백합) 키우기\",\n    summary: \"우아한 흰 꽃이 피는 스파티필룸 관리법\",\n    image: \"https://images.unsplash.com/photo-1485955900006-10f4d324d411?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300\",\n    content: `\n      <h3>🕊️ 스파티필룸의 매력</h3>\n      <p>스파티필룸은 평화백합이라고도 불리며, 우아한 흰색 꽃이 특징인 공기정화 식물입니다.</p>\n      \n      <h3>💧 물주기</h3>\n      <p>• 흙이 항상 촉촉하게 유지되도록 하세요</p>\n      <p>• 잎이 처지면 물이 부족한 신호입니다</p>\n      <p>• 받침에 고인 물도 그대로 두셔도 됩니다</p>\n      \n      <h3>☀️ 빛 조건</h3>\n      <p>• 반음지에서도 잘 자랍니다</p>\n      <p>• 너무 밝은 곳은 피해주세요</p>\n      <p>• 형광등 빛만으로도 충분합니다</p>\n      \n      <h3>🌸 꽃 피우기</h3>\n      <p>• 적절한 습도와 영양분 공급이 중요합니다</p>\n      <p>• 월 1회 액체비료를 주세요</p>\n      <p>• 꽃이 시들면 줄기째 잘라주세요</p>\n    `\n  },\n  {\n    id: 8,\n    name: \"아레카야자\",\n    title: \"아레카야자 관리법\",\n    summary: \"열대 분위기 가득한 아레카야자 키우기\",\n    image: \"https://images.unsplash.com/photo-1578662996442-48f60103fc96?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300\",\n    content: `\n      <h3>🌴 아레카야자란?</h3>\n      <p>아레카야자는 열대 분위기를 연출하는 대표적인 관엽식물로, 공기정화 능력이 뛰어납니다.</p>\n      \n      <h3>💧 물주기</h3>\n      <p>• 흙 표면이 마르면 충분히 물을 주세요</p>\n      <p>• 주 1-2회 정도가 적당합니다</p>\n      <p>• 겨울에는 물주기를 줄여주세요</p>\n      \n      <h3>☀️ 빛 조건</h3>\n      <p>• 밝은 간접광을 선호합니다</p>\n      <p>• 직사광선은 잎을 태울 수 있습니다</p>\n      <p>• 반음지에서도 잘 자랍니다</p>\n      \n      <h3>🍃 잎 관리</h3>\n      <p>• 갈색으로 변한 잎은 제거해주세요</p>\n      <p>• 분무기로 잎에 습도를 공급해주세요</p>\n      <p>• 먼지가 쌓이면 젖은 천으로 닦아주세요</p>\n    `\n  },\n  {\n    id: 9,\n    name: \"고무나무\",\n    title: \"고무나무 완벽 관리 가이드\",\n    summary: \"윤기나는 잎이 매력적인 고무나무 키우기\",\n    image: \"https://images.unsplash.com/photo-1521334884684-d80222895322?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300\",\n    content: `\n      <h3>🌳 고무나무의 특징</h3>\n      <p>고무나무는 두껍고 윤기나는 잎이 특징인 관엽식물로, 관리가 쉽고 공기정화 효과가 뛰어납니다.</p>\n      \n      <h3>💧 물주기</h3>\n      <p>• 흙 표면이 2-3cm 마르면 물을 주세요</p>\n      <p>• 과습을 피하고 적당히 건조하게 관리하세요</p>\n      <p>• 겨울에는 물주기 간격을 늘려주세요</p>\n      \n      <h3>☀️ 빛 조건</h3>\n      <p>• 밝은 간접광에서 가장 잘 자랍니다</p>\n      <p>• 직사광선에도 잘 견딥니다</p>\n      <p>• 빛이 부족하면 잎이 떨어질 수 있습니다</p>\n      \n      <h3>✨ 잎 관리</h3>\n      <p>• 정기적으로 젖은 천으로 잎을 닦아주세요</p>\n      <p>• 잎에 윤이 나는 제품을 사용할 수 있습니다</p>\n      <p>• 먼지가 쌓이면 광합성이 방해됩니다</p>\n    `\n  },\n  {\n    id: 10,\n    name: \"극락조\",\n    title: \"극락조(스트렐리치아) 관리법\",\n    summary: \"이국적인 아름다움의 극락조 키우기\",\n    image: \"https://images.unsplash.com/photo-1581595220892-b0739db3ba8c?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300\",\n    content: `\n      <h3>🦜 극락조란?</h3>\n      <p>극락조는 새의 부리를 닮은 독특한 꽃이 피는 식물로, 큰 잎과 이국적인 분위기가 매력적입니다.</p>\n      \n      <h3>💧 물주기</h3>\n      <p>• 흙이 촉촉하게 유지되도록 물을 주세요</p>\n      <p>• 성장기에는 물을 충분히 주세요</p>\n      <p>• 겨울에는 물주기를 줄여주세요</p>\n      \n      <h3>☀️ 빛 조건</h3>\n      <p>• 밝은 직사광선을 좋아합니다</p>\n      <p>• 하루 최소 6시간 이상의 햇빛이 필요합니다</p>\n      <p>• 남향 창가가 가장 적합합니다</p>\n      \n      <h3>🌺 꽃 피우기</h3>\n      <p>• 실내에서는 꽃이 피기 어렵습니다</p>\n      <p>• 충분한 공간과 햇빛이 필요합니다</p>\n      <p>• 최소 4-5년은 키워야 꽃이 핍니다</p>\n    `\n  },\n  {\n    id: 11,\n    name: \"유포르비아 트리코나\",\n    title: \"유포르비아 트리코나 관리법\",\n    summary: \"독특한 삼각기둥 모양의 다육식물 키우기\",\n    image: \"https://images.unsplash.com/photo-1459411552884-841db9b3cc2a?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300\",\n    content: `\n      <h3>🔺 유포르비아 트리코나란?</h3>\n      <p>유포르비아 트리코나는 삼각기둥 모양의 줄기가 특징인 다육식물로, 독특한 외형으로 인기가 높습니다.</p>\n      \n      <h3>💧 물주기</h3>\n      <p>• 흙이 완전히 마른 후 물을 주세요</p>\n      <p>• 겨울에는 한 달에 한 번 정도만 주세요</p>\n      <p>• 과습은 뿌리 썩음의 원인이 됩니다</p>\n      \n      <h3>☀️ 빛 조건</h3>\n      <p>• 밝은 직사광선을 좋아합니다</p>\n      <p>• 햇빛이 부족하면 웃자라게 됩니다</p>\n      <p>• 남향 창가가 가장 좋습니다</p>\n      \n      <h3>⚠️ 주의사항</h3>\n      <p>• 줄기를 자르면 흰 수액이 나옵니다</p>\n      <p>• 수액은 독성이 있으니 피부에 닿지 않도록 주의하세요</p>\n      <p>• 어린이나 반려동물이 있는 곳에서는 주의가 필요합니다</p>\n    `\n  },\n  {\n    id: 12,\n    name: \"필로덴드론 콩고\",\n    title: \"필로덴드론 콩고 관리법\",\n    summary: \"붉은 새순이 아름다운 필로덴드론 콩고 키우기\",\n    image: \"https://images.unsplash.com/photo-1631377819268-d716cd610cd2?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300\",\n    content: `\n      <h3>🔴 필로덴드론 콩고란?</h3>\n      <p>필로덴드론 콩고는 새로 나오는 잎이 붉은색이었다가 점차 녹색으로 변하는 아름다운 관엽식물입니다.</p>\n      \n      <h3>💧 물주기</h3>\n      <p>• 흙 표면이 마르면 물을 주세요</p>\n      <p>• 주 1-2회 정도가 적당합니다</p>\n      <p>• 뿌리가 물에 잠기지 않도록 주의하세요</p>\n      \n      <h3>☀️ 빛 조건</h3>\n      <p>• 밝은 간접광을 선호합니다</p>\n      <p>• 직사광선은 잎을 태울 수 있습니다</p>\n      <p>• 반음지에서도 잘 자랍니다</p>\n      \n      <h3>🌱 새순 관리</h3>\n      <p>• 새로 나오는 붉은 잎은 건드리지 마세요</p>\n      <p>• 적절한 습도를 유지해주세요</p>\n      <p>• 새순이 나올 때는 비료를 주면 좋습니다</p>\n    `\n  }\n];\n\nexport default function PlantTips() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [filteredTips, setFilteredTips] = useState(plantTips);\n\n  // 검색 기능\n  const handleSearch = (value: string) => {\n    setSearchTerm(value);\n    if (value.trim() === \"\") {\n      setFilteredTips(plantTips);\n    } else {\n      const filtered = plantTips.filter(tip => \n        tip.name.toLowerCase().includes(value.toLowerCase()) ||\n        tip.title.toLowerCase().includes(value.toLowerCase()) ||\n        tip.summary.toLowerCase().includes(value.toLowerCase())\n      );\n      setFilteredTips(filtered);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-bg-soft\">\n      <Header />\n      \n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-16\">\n        {/* 헤더 섹션 */}\n        <div className=\"text-center mb-12\">\n          <h1 className=\"text-4xl font-bold text-gray-900 mb-4\" data-testid=\"tips-title\">\n            식물별 관리 팁\n          </h1>\n          <p className=\"text-lg text-gray-600 max-w-2xl mx-auto mb-8\">\n            전문가가 알려주는 각 식물별 상세한 관리 방법을 확인해보세요.\n          </p>\n          \n          {/* 검색 바 */}\n          <div className=\"max-w-md mx-auto relative\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5\" />\n            <Input\n              type=\"text\"\n              placeholder=\"식물 이름으로 검색...\"\n              value={searchTerm}\n              onChange={(e) => handleSearch(e.target.value)}\n              className=\"pl-10 pr-4 py-2 w-full border border-gray-300 rounded-lg focus:ring-2 focus:ring-forest focus:border-transparent\"\n              data-testid=\"search-input\"\n            />\n          </div>\n        </div>\n\n        {/* 팁 카드 목록 */}\n        <div className=\"mb-8\">\n          {filteredTips.length === 0 ? (\n            <div className=\"text-center py-12\">\n              <p className=\"text-lg text-gray-500\" data-testid=\"no-results-message\">\n                검색 결과가 없습니다. 다른 키워드로 시도해보세요.\n              </p>\n            </div>\n          ) : (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n              {filteredTips.map((tip) => (\n                <Card \n                  key={tip.id} \n                  className=\"bg-white rounded-2xl shadow-md hover:shadow-lg transition-shadow duration-300 overflow-hidden\"\n                  data-testid={`card-tip-${tip.id}`}\n                >\n                  <div className=\"relative\">\n                    <img \n                      src={tip.image}\n                      alt={tip.name}\n                      className=\"w-full h-48 object-cover\"\n                      data-testid={`img-tip-${tip.id}`}\n                    />\n                    <div className=\"absolute top-3 left-3 bg-white rounded-full px-3 py-1 shadow-md flex items-center space-x-1\">\n                      <Leaf className=\"h-4 w-4 text-green-500\" />\n                      <span className=\"text-sm font-medium text-gray-900\">팁</span>\n                    </div>\n                  </div>\n                  \n                  <CardHeader>\n                    <CardTitle className=\"text-xl font-bold text-gray-900\" data-testid={`text-tip-title-${tip.id}`}>\n                      {tip.title}\n                    </CardTitle>\n                  </CardHeader>\n                  \n                  <CardContent className=\"pt-0\">\n                    <p className=\"text-gray-600 mb-4\" data-testid={`text-tip-summary-${tip.id}`}>\n                      {tip.summary}\n                    </p>\n                    \n                    {/* 상세 내용 - HTML로 렌더링 */}\n                    <div \n                      className=\"text-sm text-gray-700 space-y-3\"\n                      dangerouslySetInnerHTML={{ __html: tip.content }}\n                      data-testid={`content-tip-${tip.id}`}\n                    />\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          )}\n        </div>\n      </div>\n      \n      <Footer />\n    </div>\n  );\n}","size_bytes":18828}},"version":1}